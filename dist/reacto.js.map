{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./dist/transpiled-ts-js/modules/services/util.js","webpack:///./dist/transpiled-ts-js/modules/interpreters/var.js","webpack:///./dist/transpiled-ts-js/modules/services/locale.js","webpack:///./dist/transpiled-ts-js/modules/interpreters/calc.js","webpack:///./dist/transpiled-ts-js/modules/services/system.js","webpack:///./dist/transpiled-ts-js/modules/interpreters/cfg.js","webpack:///./dist/transpiled-ts-js/modules/interpreters/dt.js","webpack:///./dist/transpiled-ts-js/modules/interpreters/fn.js","webpack:///./dist/transpiled-ts-js/modules/interpreters/if.js","webpack:///./dist/transpiled-ts-js/modules/interpreters/interpret.js","webpack:///./dist/transpiled-ts-js/modules/interpreters/blocks.js","webpack:///./dist/transpiled-ts-js/modules/processor.js","webpack:///./dist/transpiled-ts-js/index.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","_prepValForMaths","tok","v","isNaN","Number","_startsWith","str","part","substr","length","_privateVars","setAllVars","kvPairs","assign","_getVar","k","toString","_interpret_var","token","indexOf","parts","split","trim","val","R_VAR","map","realValue","join","LOCALES","currentLocale","getLocales","numToLocale","num","Intl","NumberFormat","format","allCalcResults","skipLTP","result","op1","op2","push","len","res","_createSpecialCalcVar","___isPrintOff","___prevReacto","data","setPrintOff","getPrevReacto","setPrevReacto","langCode","replace","localeCode","keys","includes","console","log","JSON","stringify","_interpret_dt","rToken","Date","dnow","now","locale","DateTimeFormat","year","day","hour","hourCycle","minute","second","weekday","month","fns","_chainingCondition","_interpret_if","_determineChaningCondition","prevReacto","prevResult","Boolean","aReacto","interpretedTxt","substring","fnData","fnName","params","slice","apply","window","_interpret_fn","blockID","block","_rBlocks","_findAndProcessReactos","_interpret_blk","rTxt","err","process","txt","nTxt","blockCount","rBlock","ID","_preReplaceBlocks","_eatUnwantedNL","_startProcessing","rto","getVersion","addFn","fn","getFnList","getAllVars","resetVars"],"mappings":"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ACN,GAAM,UACN,GAAM,YACN,GAAM,oBACN,GAAM,SACN,GAAM,WACN,GAAM,gBACN,GAAM,sBACN,GAAM,6BACN,GAAM,0BACN,GAAM,SACN,GAAM,UACN,GAAM,UACN,GAAM,WACN,GAAM,UACN,GAAM,UACN,GAAM,iBACN,GAAM,iBACN,GAAM,QACN,GAAM,aACN,GAAM,gBACN,GAAM,YACN,GAAM,SACN,GAAM,cACN,GAAM,mBACN,GAAM,sDACN,GAAM,UACN,GAAM,aACN,GAAM,qBACN,GAAM,MACN,GAAM,WACN,GAAM,WACN,GAAM,SACN,GAAM,aACN,GAAM,kBACN,GAAM,iCACN,GAAM,QACN,GAAM,SACN,GAAM,mBACN,GAAM,aACN,GAAM,6BACN,GAAM,SACN,GAAM,eACN,GAAM,wBACN,GAAM,WACN,GAAM,UACN,GAAM,MACN,GAAM,gBACN,GAAM,WACN,GAAM,wBACN,GAAM,iBACN,GAAM,UACN,GAAM,WACN,GAAM,UACN,GAAM,UACN,GAAM,iBACN,GAAM,SACN,GAAM,kBACN,GAAM,gBACN,GAAM,mBACN,GAAM,kBACN,GAAM,6BACN,GAAM,SACN,GAAM,QACN,GAAM,eACN,GAAM,QACN,GAAM,eACN,GAAM,aACN,GAAM,iBACN,GAAM,cACN,GAAM,aACN,GAAM,SACN,GAAM,SACN,GAAM,eACN,GAAM,gBACN,GAAM,QACN,GAAM,gBACN,GAAM,aACN,GAAM,sBACN,GAAM,WACN,GAAM,mBACN,GAAM,eACN,GAAM,QACN,GAAM,aACN,GAAM,kBACN,GAAM,aACN,GAAM,QACN,GAAM,4BACN,GAAM,OACN,GAAM,YACN,GAAM,oBACN,GAAM,qBACN,GAAM,WACN,GAAM,SACN,GAAM,UACN,GAAM,YACN,GAAM,QACN,GAAM,uBACN,GAAM,kBACN,GAAM,oBACN,GAAM,iBACN,GAAM,eACN,GAAM,WACN,GAAM,WACN,GAAM,QACN,GAAM,8BACN,GAAM,+BACN,GAAM,0BACN,GAAM,UACN,GAAM,UACN,GAAM,aACN,GAAM,YACN,GAAM,UACN,GAAM,UACN,GAAM,QACN,GAAM,SACN,GAAM,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","file":"reacto.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","import { _interpret } from '../interpreters';\r\nexport { _prepValForMaths, _eatUnwantedNL, _startsWith };\r\n/**\r\n * It will check if given token is a Reacto, if yes\r\n * then convert it to a number for maths\r\n */\r\nfunction _prepValForMaths(tok) {\r\n    let v = _interpret(tok, true);\r\n    // @ts-ignore\r\n    if (!isNaN(v)) {\r\n        return Number(v);\r\n    }\r\n    // @ts-ignore\r\n    return v;\r\n}\r\n/*\r\n* If a line ends with \\\r\n* i.e. a \"\\\" immediately followed by \"\\n\" (enter)\r\n* Then eat that newline up...\r\n*/\r\nfunction _eatUnwantedNL(txt) {\r\n    //console.log(\"before=\"); console.log(txt);\r\n    // txt = txt.replace(/(\\s+|)\\\\(\\r\\n|\\r|\\n)/g, ' ').trim();  // eat spaces also\r\n    txt = txt.replace(/\\\\(\\r\\n|\\r|\\n)/g, '').trim();\r\n    //sometimes due to excessive trimming at each phase, \r\n    // the last \"\\\" can be left alone without a \"\\n\" to have it removed\r\n    // hence remove any trailing left-alone \"\\\"\r\n    while (txt[txt.length - 1] === \"\\\\\") {\r\n        txt = txt.substr(0, txt.length - 1);\r\n    }\r\n    //console.log(\"after=\"); console.log(txt);\r\n    return txt;\r\n}\r\nfunction _startsWith(str, part) {\r\n    if (!str || !part)\r\n        return false;\r\n    return str.substr(0, part.length) === part;\r\n}\r\n//# sourceMappingURL=util.js.map","/**\r\n * Users can set and get variables\r\n * Structures:\r\n * (r.var.k1)   // to get a value\r\n * (r.var.k1=v1)    // to set a value\r\n * (r.var.k1=r.dt.date)    // to set a value from a reacto itself\r\n *\r\n * Since \"_interpret\" has already stripped \"var.\", here we will get either of\r\n * key          (for a get)\r\n * key=value    (for a set)\r\n * @param {String} token\r\n */\r\nimport { _startsWith } from '../services/util';\r\nimport { _interpret } from './index';\r\n/*\r\n To store all user defined reacto-variable\r\n declared using ((r.var.varName = varValue))\r\n*/\r\nlet _privateVars = {};\r\nexport const _setVar = (k, v) => _privateVars[k] = v;\r\nexport const setAllVars = (kvPairs) => _privateVars = Object.assign(Object.assign({}, _privateVars), kvPairs);\r\n// Fail silently, but ensure 0 is NOT FALSE by changing it to String\r\nexport const _getVar = (k) => (typeof (_privateVars[k]) !== 'undefined') ? _privateVars[k].toString() : '';\r\nexport const resetVars = () => _privateVars = {};\r\nexport const getAllVars = () => (Object.assign({}, _privateVars));\r\n/**\r\n * Interpret both get and set call.\r\n * Example of get call, ((r.var.varName))\r\n * Example of set call, ((r.var.varName = some text value of any length and may contain new line))\r\n * @param token | r\r\n */\r\nexport const _interpret_var = (token) => {\r\n    // if a SET call\r\n    if (token.indexOf(\"=\") > -1) {\r\n        var parts = token.split(\"=\");\r\n        var key = parts[0].trim();\r\n        var val = parts[1].trim();\r\n        // NOTE: check if the value is a reacto itself :P\r\n        // ((r.var.thisYear = r.dt.year))\r\n        val = _startsWith(val, \"r.\") ? _interpret(val, true) : val;\r\n        _setVar(key, val);\r\n        return '';\r\n    }\r\n    // Else a GET call\r\n    // Caution, if the value was previously set by reacto, then it may need to process by LangTranslate\r\n    else {\r\n        let value = _getVar(token.toString().trim());\r\n        // Let's give 1 level of interpolation feature\r\n        // that is,\r\n        // if another r.var.var_name is embedded in this one,\r\n        // then replace it with the real value \r\n        const R_VAR = 'r.var.';\r\n        value = value.split(' ').map(v => {\r\n            if (_startsWith(v, R_VAR)) {\r\n                let realValue = _getVar(v.substr(R_VAR.length));\r\n                if (typeof (realValue) !== 'undefined')\r\n                    v = realValue;\r\n            }\r\n            return v;\r\n        }).join(' ');\r\n        return value;\r\n    }\r\n};\r\n//# sourceMappingURL=var.js.map","/**\r\n * Extracted the locales from https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes\r\n * Added a class 'ltbl' in table, and then ran the following script\r\n *\r\n    var a = {}\r\n    $('.ltbl tr').each(function() {\r\n        a[$(this).find('td:nth-child(5)').text()] = $(this).find('td:nth-child(4)').text()\r\n    })\r\n    copy(a)\r\n    \r\n */\r\nconst LOCALES = {\r\n    \"ab\": \"аҧсуа бызшәа, аҧсшәа\",\r\n    \"aa\": \"Afaraf\",\r\n    \"af\": \"Afrikaans\",\r\n    \"ak\": \"Akan\",\r\n    \"sq\": \"Shqip\",\r\n    \"am\": \"አማርኛ\",\r\n    \"ar\": \"العربية\",\r\n    \"an\": \"aragonés\",\r\n    \"hy\": \"Հայերեն\",\r\n    \"as\": \"অসমীয়া\",\r\n    \"av\": \"авар мацӀ, магӀарул мацӀ\",\r\n    \"ae\": \"avesta\",\r\n    \"ay\": \"aymar aru\",\r\n    \"az\": \"azərbaycan dili, تۆرکجه\",\r\n    \"bm\": \"bamanankan\",\r\n    \"ba\": \"башҡорт теле\",\r\n    \"eu\": \"euskara, euskera\",\r\n    \"be\": \"беларуская мова\",\r\n    \"bn\": \"বাংলা\",\r\n    \"bh\": \"भोजपुरी\",\r\n    \"bi\": \"Bislama\",\r\n    \"bs\": \"bosanski jezik\",\r\n    \"br\": \"brezhoneg\",\r\n    \"bg\": \"български език\",\r\n    \"my\": \"ဗမာစာ\",\r\n    \"ca\": \"català, valencià\",\r\n    \"ch\": \"Chamoru\",\r\n    \"ce\": \"нохчийн мотт\",\r\n    \"ny\": \"chiCheŵa, chinyanja\",\r\n    \"zh\": \"中文 (Zhōngwén), 汉语, 漢語\",\r\n    \"cv\": \"чӑваш чӗлхи\",\r\n    \"kw\": \"Kernewek\",\r\n    \"co\": \"corsu, lingua corsa\",\r\n    \"cr\": \"ᓀᐦᐃᔭᐍᐏᐣ\",\r\n    \"hr\": \"hrvatski jezik\",\r\n    \"cs\": \"čeština, český jazyk\",\r\n    \"da\": \"dansk\",\r\n    \"dv\": \"ދިވެހި\",\r\n    \"nl\": \"Nederlands, Vlaams\",\r\n    \"dz\": \"རྫོང་ཁ\",\r\n    \"en\": \"English\",\r\n    \"eo\": \"Esperanto\",\r\n    \"et\": \"eesti, eesti keel\",\r\n    \"ee\": \"Eʋegbe\",\r\n    \"fo\": \"føroyskt\",\r\n    \"fj\": \"vosa Vakaviti\",\r\n    \"fi\": \"suomi, suomen kieli\",\r\n    \"fr\": \"français, langue française\",\r\n    \"ff\": \"Fulfulde, Pulaar, Pular\",\r\n    \"gl\": \"Galego\",\r\n    \"ka\": \"ქართული\",\r\n    \"de\": \"Deutsch\",\r\n    \"el\": \"ελληνικά\",\r\n    \"gn\": \"Avañe'ẽ\",\r\n    \"gu\": \"ગુજરાતી\",\r\n    \"ht\": \"Kreyòl ayisyen\",\r\n    \"ha\": \"(Hausa) هَوُسَ\",\r\n    \"he\": \"עברית\",\r\n    \"hz\": \"Otjiherero\",\r\n    \"hi\": \"हिन्दी, हिंदी\",\r\n    \"ho\": \"Hiri Motu\",\r\n    \"hu\": \"magyar\",\r\n    \"ia\": \"Interlingua\",\r\n    \"id\": \"Bahasa Indonesia\",\r\n    \"ie\": \"(originally:) Occidental, (after WWII:) Interlingue\",\r\n    \"ga\": \"Gaeilge\",\r\n    \"ig\": \"Asụsụ Igbo\",\r\n    \"ik\": \"Iñupiaq, Iñupiatun\",\r\n    \"io\": \"Ido\",\r\n    \"is\": \"Íslenska\",\r\n    \"it\": \"Italiano\",\r\n    \"iu\": \"ᐃᓄᒃᑎᑐᑦ\",\r\n    \"ja\": \"日本語 (にほんご)\",\r\n    \"jv\": \"ꦧꦱꦗꦮ, Basa Jawa\",\r\n    \"kl\": \"kalaallisut, kalaallit oqaasii\",\r\n    \"kn\": \"ಕನ್ನಡ\",\r\n    \"kr\": \"Kanuri\",\r\n    \"ks\": \"कश्मीरी, كشميري‎\",\r\n    \"kk\": \"қазақ тілі\",\r\n    \"km\": \"ខ្មែរ, ខេមរភាសា, ភាសាខ្មែរ\",\r\n    \"ki\": \"Gĩkũyũ\",\r\n    \"rw\": \"Ikinyarwanda\",\r\n    \"ky\": \"Кыргызча, Кыргыз тили\",\r\n    \"kv\": \"коми кыв\",\r\n    \"kg\": \"Kikongo\",\r\n    \"ko\": \"한국어\",\r\n    \"ku\": \"Kurdî, کوردی‎\",\r\n    \"kj\": \"Kuanyama\",\r\n    \"la\": \"latine, lingua latina\",\r\n    \"lb\": \"Lëtzebuergesch\",\r\n    \"lg\": \"Luganda\",\r\n    \"li\": \"Limburgs\",\r\n    \"ln\": \"Lingála\",\r\n    \"lo\": \"ພາສາລາວ\",\r\n    \"lt\": \"lietuvių kalba\",\r\n    \"lu\": \"Kiluba\",\r\n    \"lv\": \"latviešu valoda\",\r\n    \"gv\": \"Gaelg, Gailck\",\r\n    \"mk\": \"македонски јазик\",\r\n    \"mg\": \"fiteny malagasy\",\r\n    \"ms\": \"Bahasa Melayu, بهاس ملايو‎\",\r\n    \"ml\": \"മലയാളം\",\r\n    \"mt\": \"Malti\",\r\n    \"mi\": \"te reo Māori\",\r\n    \"mr\": \"मराठी\",\r\n    \"mh\": \"Kajin M̧ajeļ\",\r\n    \"mn\": \"Монгол хэл\",\r\n    \"na\": \"Dorerin Naoero\",\r\n    \"nv\": \"Diné bizaad\",\r\n    \"nd\": \"isiNdebele\",\r\n    \"ne\": \"नेपाली\",\r\n    \"ng\": \"Owambo\",\r\n    \"nb\": \"Norsk Bokmål\",\r\n    \"nn\": \"Norsk Nynorsk\",\r\n    \"no\": \"Norsk\",\r\n    \"ii\": \"ꆈꌠ꒿ Nuosuhxop\",\r\n    \"nr\": \"isiNdebele\",\r\n    \"oc\": \"occitan, lenga d'òc\",\r\n    \"oj\": \"ᐊᓂᔑᓈᐯᒧᐎᓐ\",\r\n    \"cu\": \"ѩзыкъ словѣньскъ\",\r\n    \"om\": \"Afaan Oromoo\",\r\n    \"or\": \"ଓଡ଼ିଆ\",\r\n    \"os\": \"ирон æвзаг\",\r\n    \"pa\": \"ਪੰਜਾਬੀ, پنجابی‎\",\r\n    \"pi\": \"पालि, पाळि\",\r\n    \"fa\": \"فارسی\",\r\n    \"pl\": \"język polski, polszczyzna\",\r\n    \"ps\": \"پښتو\",\r\n    \"pt\": \"Português\",\r\n    \"qu\": \"Runa Simi, Kichwa\",\r\n    \"rm\": \"Rumantsch Grischun\",\r\n    \"rn\": \"Ikirundi\",\r\n    \"ro\": \"Română\",\r\n    \"ru\": \"русский\",\r\n    \"sa\": \"संस्कृतम्\",\r\n    \"sc\": \"sardu\",\r\n    \"sd\": \"सिन्धी, سنڌي، سندھی‎\",\r\n    \"se\": \"Davvisámegiella\",\r\n    \"sm\": \"gagana fa'a Samoa\",\r\n    \"sg\": \"yângâ tî sängö\",\r\n    \"sr\": \"српски језик\",\r\n    \"gd\": \"Gàidhlig\",\r\n    \"sn\": \"chiShona\",\r\n    \"si\": \"සිංහල\",\r\n    \"sk\": \"Slovenčina, Slovenský jazyk\",\r\n    \"sl\": \"Slovenski jezik, Slovenščina\",\r\n    \"so\": \"Soomaaliga, af Soomaali\",\r\n    \"st\": \"Sesotho\",\r\n    \"es\": \"Español\",\r\n    \"su\": \"Basa Sunda\",\r\n    \"sw\": \"Kiswahili\",\r\n    \"ss\": \"SiSwati\",\r\n    \"sv\": \"Svenska\",\r\n    \"ta\": \"தமிழ்\",\r\n    \"te\": \"తెలుగు\",\r\n    \"tg\": \"тоҷикӣ, toçikī, تاجیکی‎\",\r\n    \"th\": \"ไทย\",\r\n    \"ti\": \"ትግርኛ\",\r\n    \"bo\": \"བོད་ཡིག\",\r\n    \"tk\": \"Türkmen, Түркмен\",\r\n    \"tl\": \"Wikang Tagalog\",\r\n    \"tn\": \"Setswana\",\r\n    \"to\": \"Faka Tonga\",\r\n    \"tr\": \"Türkçe\",\r\n    \"ts\": \"Xitsonga\",\r\n    \"tt\": \"татар теле, tatar tele\",\r\n    \"tw\": \"Twi\",\r\n    \"ty\": \"Reo Tahiti\",\r\n    \"ug\": \"ئۇيغۇرچە‎, Uyghurche\",\r\n    \"uk\": \"Українська\",\r\n    \"ur\": \"اردو\",\r\n    \"uz\": \"Oʻzbek, Ўзбек, أۇزبېك‎\",\r\n    \"ve\": \"Tshivenḓa\",\r\n    \"vi\": \"Tiếng Việt\",\r\n    \"vo\": \"Volapük\",\r\n    \"wa\": \"Walon\",\r\n    \"cy\": \"Cymraeg\",\r\n    \"wo\": \"Wollof\",\r\n    \"fy\": \"Frysk\",\r\n    \"xh\": \"isiXhosa\",\r\n    \"yi\": \"ייִדיש\",\r\n    \"yo\": \"Yorùbá\",\r\n    \"za\": \"Saɯ cueŋƅ, Saw cuengh\",\r\n    \"zu\": \"isiZulu\"\r\n};\r\nlet currentLocale = 'en'; // always fallback to English\r\nexport const getLocales = () => (Object.assign({}, LOCALES)); // return a copy, no accidental modification\r\n//  export const getLangs = () => Object.values(LOCALES)\r\n//  export const getLocaleCodes = () => Object.keys(LOCALES)\r\nexport const getCurrentLocale = () => currentLocale;\r\n/**\r\n * Set current locale if only a valid one, else keep 'en'\r\n * @param localeCode\r\n */\r\nexport const setCurrentLocale = (localeCode) => {\r\n    if (Object.keys(LOCALES).includes(localeCode)) {\r\n        currentLocale = localeCode;\r\n    }\r\n    else {\r\n        console.log('The passed locale code ' + localeCode + ' is not a valid local codes.');\r\n        console.log('For your help, this are valid locales -');\r\n        console.log(JSON.stringify(getLocales(), null, 4));\r\n    }\r\n};\r\n/**\r\n * Convert a number to a local string representation,\r\n * e.g. in Bengali 97 => \"৯৭\"\r\n * @param num any number\r\n * @returns\r\n */\r\nexport const numToLocale = (num) => new Intl.NumberFormat(currentLocale).format(num);\r\n//# sourceMappingURL=locale.js.map","import { _prepValForMaths } from '../services/util';\r\nimport { setAllVars } from './var';\r\nimport { numToLocale } from '../services/locale';\r\n/*\r\n    * This function will do basic 4 maths opearion i.e. + - * /\r\n    * ((r.calc. n1 OP n2))\r\n    * n1 and n2 can be any number or reacto\r\n    * OP is anyone of + - * /\r\n    * since \"((r.calc.\" and \"))\" has been stripped from begining and end, here we will only get the following\r\n    * n1 OP n2\r\n*/\r\nlet allCalcResults = []; // This array will keep on storing all Calc results\r\nfunction _interpret_calc(tok, skipLTP) {\r\n    let result;\r\n    if (tok.indexOf('+') >= 0) {\r\n        let parts = tok.split('+');\r\n        const op1 = _prepValForMaths(parts[0]);\r\n        const op2 = _prepValForMaths(parts[1]);\r\n        if (!isNaN(op1) && !isNaN(op2)) {\r\n            result = op1 + op2;\r\n        }\r\n    }\r\n    else if (tok.indexOf('-') >= 0) {\r\n        let parts = tok.split('-');\r\n        const op1 = _prepValForMaths(parts[0]);\r\n        const op2 = _prepValForMaths(parts[1]);\r\n        if (!isNaN(op1) && !isNaN(op2)) {\r\n            result = op1 - op2;\r\n        }\r\n    }\r\n    else if (tok.indexOf('*') >= 0) {\r\n        let parts = tok.split('*');\r\n        const op1 = _prepValForMaths(parts[0]);\r\n        const op2 = _prepValForMaths(parts[1]);\r\n        if (!isNaN(op1) && !isNaN(op2)) {\r\n            result = op1 * op2;\r\n        }\r\n    }\r\n    else if (tok.indexOf('/') >= 0) {\r\n        let parts = tok.split('/');\r\n        const op1 = _prepValForMaths(parts[0]);\r\n        const op2 = _prepValForMaths(parts[1]);\r\n        if (!isNaN(op1) && !isNaN(op2)) {\r\n            result = op1 / op2;\r\n        }\r\n    }\r\n    // Store it results array\r\n    if (typeof (result) !== 'undefined') {\r\n        allCalcResults.push(result);\r\n        _createSpecialCalcVar();\r\n    }\r\n    if (!skipLTP) {\r\n        if (typeof (result) === 'undefined') {\r\n            // do nothing\r\n        }\r\n        else {\r\n            // result = '_r$$_' + result.toString().split('').join('_r$$_');\r\n            result = numToLocale(result);\r\n        }\r\n    }\r\n    return typeof (result) !== 'undefined' ? result.toString() : '';\r\n}\r\n/**\r\n *  https://github.com/reactale/reacto-core/issues/2\r\n *\r\n *  Whenever user does any ((r.calc.)) operation, the result will automatically saved in a special system level ((r.var.))\r\n\r\n    This will help user use the and outcome of the calc operations and then do something with it.\r\n\r\n    Example\r\n\r\n    ((r.calc. 7+2))    // will output 9\r\n    ((r.calc. 1+17))    // will output 18\r\n    ((r.calc. 22+5))    // will output 27\r\n\r\n\r\n    ((r.var._1))    // Should give last calc. result i.e. 27\r\n    ((r.var._2))    // Should give 18\r\n    ((r.var._3))    // Should give 9\r\n */\r\nfunction _createSpecialCalcVar() {\r\n    const len = allCalcResults.length;\r\n    const res = {};\r\n    for (let i = 1; i <= len; i++) {\r\n        res[`_${i}`] = allCalcResults[len - i];\r\n    }\r\n    setAllVars(res);\r\n    return res;\r\n}\r\nexport default _interpret_calc;\r\n//# sourceMappingURL=calc.js.map","let ___isPrintOff = false;\r\nlet ___prevReacto = { name: '', data: '' };\r\nexport const isPrintOff = () => ___isPrintOff;\r\nexport const setPrintOff = (v) => ___isPrintOff = v;\r\nexport const getPrevReacto = () => ___prevReacto;\r\nexport const setPrevReacto = (r) => ___prevReacto = r;\r\n//# sourceMappingURL=system.js.map","/**\r\n * All Reactos, that start with \"cfg.\" should come here for interpretation\r\n * These are Configuration Reactos, like (r.cfg.setLocale.bn) or (r.cfg.setLocale.en) etc\r\n * For the purpose of \"$$\" see explanation above of function _interpret\r\n * @param {String} token\r\n */\r\nimport { _startsWith } from '../services/util';\r\nimport { setCurrentLocale } from '../services/locale';\r\nimport { setPrintOff } from '../services/system';\r\nfunction _interpret_cfg(token) {\r\n    // (r.cfg.setLocale.en) => Changes rto.currentLang\r\n    if (_startsWith(token, 'setLocale')) {\r\n        var langCode = token.replace('setLocale.', '').trim(); // remove 'setLocale.'\r\n        setCurrentLocale(langCode);\r\n    }\r\n    else if (token === 'printOff') {\r\n        setPrintOff(true);\r\n    }\r\n    else if (token === 'printOn') {\r\n        setPrintOff(false);\r\n    }\r\n    return '';\r\n}\r\nexport default _interpret_cfg;\r\n//# sourceMappingURL=cfg.js.map","/**\r\n * All Reactos, that start with \"dt.\" should come here for interpretation\r\n * These are DateTime Reactos,\r\n * For skipLTP = Skip Language Translation Process\r\n * @param {String} rToken\r\n */\r\nimport { getCurrentLocale } from '../services/locale';\r\nexport const _interpret_dt = (rToken, skipLTP) => {\r\n    let newTxt = '';\r\n    let d = new Date();\r\n    const dnow = Date.now();\r\n    const locale = skipLTP ? 'en' : getCurrentLocale();\r\n    switch (rToken) {\r\n        // Reacto = ((r.dt.year))\r\n        case \"year\":\r\n            // newTxt = d.getFullYear();\r\n            return new Intl.DateTimeFormat(locale, { year: \"numeric\" }).format(dnow);\r\n        // (r.dt.date)\r\n        case \"date\":\r\n            // newTxt = d.getDate();\r\n            return new Intl.DateTimeFormat(locale, { day: \"numeric\" }).format(dnow);\r\n        // ((r.dt.hour))\r\n        // 12 at night should be shown as 12, not 0\r\n        case \"hour\":\r\n            // newTxt = ((d.getHours() > 12 ? (d.getHours() - 12) : d.getHours()) || 12);\r\n            // @ts-ignore\r\n            return new Intl.DateTimeFormat(locale, { hour: \"numeric\", hourCycle: \"h12\" }).format(dnow);\r\n        // ((r.dt.hour24))\r\n        case \"hour24\":\r\n            // @ts-ignore\r\n            return new Intl.DateTimeFormat(locale, { hour: \"numeric\", hourCycle: \"h23\" }).format(dnow);\r\n        // ((r.dt.min))\r\n        case \"min\":\r\n            return new Intl.DateTimeFormat(locale, { minute: \"numeric\" }).format(dnow);\r\n        // ((r.dt.sec))\r\n        case \"sec\":\r\n            return new Intl.DateTimeFormat(locale, { second: \"numeric\" }).format(dnow);\r\n        // ((r.dt.day))\r\n        case \"day\":\r\n            // newTxt = days[d.getDay()];\r\n            return new Intl.DateTimeFormat(locale, { weekday: \"long\" }).format(dnow);\r\n        // ((r.dt.month))\r\n        case \"month\":\r\n            return new Intl.DateTimeFormat(locale, { month: \"long\" }).format(dnow);\r\n    }\r\n    return newTxt;\r\n};\r\n//# sourceMappingURL=dt.js.map","/*\r\n* ((r.fn.fnName))\r\n* ((r.fn.fnName ,, param1 ,, param2 ))  // pass params separated with Double Comma\r\n* This function interprets Function reactos\r\n* And call the functions\r\n*/\r\n// fns will hold all the declared functions\r\n// that can be excuted using ((r.fn.fnName)) \r\nlet fns = {};\r\nexport const addFn = (fnName, fn) => fns[fnName] = fn;\r\nexport const getFn = (fnName) => fns[fnName];\r\nexport const getFnList = () => Object.keys(fns);\r\n/**\r\n * Interpret / run a stored function\r\n *\r\n * Pass ((r.fn.fnName ,, param1, param2 ))\r\n * after stripping the the initial `((r.fn.`\r\n * @param fnData | fnName ,, param1 ,, param2\r\n */\r\nexport const _interpret_fn = (fnData) => {\r\n    let res = '';\r\n    let fnName = fnData.trim();\r\n    let params = [];\r\n    // If there are params\r\n    // Then seprate the Fn and The params\r\n    if (fnData.indexOf(',,') >= 0) {\r\n        let parts = fnData.split(',,');\r\n        fnName = parts[0].trim();\r\n        params = parts.slice(1).map(v => v.trim());\r\n    }\r\n    if (fns[fnName] && typeof (fns[fnName]) === \"function\") {\r\n        res = fns[fnName].apply(window, params);\r\n    }\r\n    return res;\r\n};\r\n//# sourceMappingURL=fn.js.map","import { _prepValForMaths, _startsWith } from '../services/util';\r\nimport { getPrevReacto, setPrevReacto } from '../services/system';\r\n/*\r\n* If an \"if reacto\" is processed, this var will store the bool result\r\n* Next,\r\n* If the next reacto is also \"if reacto\"\r\n*\r\n* If reacto determines the show/hide of the upcoming BLOCK\r\n*/\r\n// let _ifResult = true\r\nlet _chainingCondition = '';\r\n// export const get_ifResult = () => _ifResult\r\n// export const set_ifResult = v => _ifResult = v\r\n// export const reset_ifResult = () => {\r\n//     _ifResult = true\r\n//     _chainingCondition = 'AND'\r\n// }\r\n/**\r\n     * This function will interpret If statements and return rTrue or rFalse\r\n     * since \"((r.if.\" and \"))\" has been stripped from begining and end, here we will only get the following\r\n     * r.var.myNum = 1 (comparison operator, do a == check)\r\n     * r.dt.year > r.var.someSavedYear\r\n     * 4 < 9\r\n     * and all the ! counter parts\r\n     *\r\n     * For Chaining, the subsequent if reactos must contain .or / .and, e.g.\r\n     * AND reacto => ((r.if.and. 9 > 5))\r\n     * OR reacto => ((r.if.and. 7 > 3))\r\n     *\r\n     * @param {*} tok\r\n*/\r\nexport const _interpret_if = (tok) => {\r\n    let result; // undefined\r\n    // first determine if it is AND or OR or Default (for first one)\r\n    // also clears the token of initial or. / and. (if any)\r\n    tok = _determineChaningCondition(tok);\r\n    if (tok.indexOf('!=') >= 0) {\r\n        let parts = tok.split('!=');\r\n        result = _prepValForMaths(parts[0]) != _prepValForMaths(parts[1]);\r\n    }\r\n    else if (tok.indexOf('>=') >= 0) {\r\n        let parts = tok.split('>=');\r\n        result = _prepValForMaths(parts[0]) >= _prepValForMaths(parts[1]);\r\n    }\r\n    else if (tok.indexOf('<=') >= 0) {\r\n        let parts = tok.split('<=');\r\n        result = _prepValForMaths(parts[0]) <= _prepValForMaths(parts[1]);\r\n    }\r\n    else if (tok.indexOf('=') >= 0) {\r\n        let parts = tok.split('=');\r\n        result = _prepValForMaths(parts[0]) == _prepValForMaths(parts[1]);\r\n    }\r\n    else if (tok.indexOf('>') >= 0) {\r\n        let parts = tok.split('>');\r\n        result = _prepValForMaths(parts[0]) > _prepValForMaths(parts[1]);\r\n    }\r\n    else if (tok.indexOf('<') >= 0) {\r\n        let parts = tok.split('<');\r\n        result = _prepValForMaths(parts[0]) < _prepValForMaths(parts[1]);\r\n    }\r\n    // no match\r\n    // i.e. could not interpret, as none of the if else qualified\r\n    else {\r\n        return tok;\r\n    }\r\n    if (typeof (result) !== 'undefined') {\r\n        // if current one is an AND / OR ?\r\n        if (_chainingCondition) {\r\n            // get the prev result to chain with\r\n            const prevReacto = getPrevReacto();\r\n            // Chain possible if prev reacto was also an 'if'\r\n            if (prevReacto.name === 'if') {\r\n                let prevResult = Boolean(prevReacto.data);\r\n                result = _chainingCondition === 'AND' ? (prevResult && result) : (prevResult || result);\r\n            }\r\n        }\r\n        setPrevReacto({\r\n            name: 'if',\r\n            data: result\r\n        });\r\n    }\r\n    return '';\r\n};\r\n/**\r\n * Determing if it is a starting if. reacto\r\n * or a chaning if.and. / if.or.\r\n * @param {*} tok\r\n * @returns\r\n */\r\nfunction _determineChaningCondition(tok) {\r\n    // if it is an AND\r\n    if (_startsWith(tok, 'and.')) {\r\n        tok = tok.substr(4);\r\n        _chainingCondition = 'AND';\r\n    }\r\n    // else if it is an OR\r\n    else if (_startsWith(tok, 'or.')) {\r\n        tok = tok.substr(3);\r\n        _chainingCondition = 'OR';\r\n    }\r\n    // if it was an only if., i.e. no if.and. / if.or. at start\r\n    else {\r\n        // No chaining ?\r\n        // Begining of the Chain ?\r\n        // In any case, reset to defaults\r\n        _chainingCondition = '';\r\n    }\r\n    return tok;\r\n}\r\n//# sourceMappingURL=if.js.map","/**\r\n * This function will receive, presumably, a reacto\r\n * and it should look like either r.class.property OR ((r.class.property))\r\n * For Language Translation Prepending with \"r$$_\" is necessary, LTP in short\r\n * skipLTP is False by default\r\n * forward skipLTP to the Reacto Interpreters which returns a value (a number or a string)\r\n */\r\nimport { _interpret_blk, _interpret_calc, _interpret_cfg, _interpret_dt, _interpret_fn, _interpret_if, _interpret_var } from './index';\r\nimport { _startsWith } from '../services/util';\r\nimport { setPrevReacto } from '../services/system';\r\nfunction _interpret(aReacto, skipLTP = false) {\r\n    skipLTP = skipLTP || false;\r\n    //let ifReacto = false;\r\n    let interpretedTxt = \"\";\r\n    let tok = aReacto.trim();\r\n    // If Not a valid reacto, just return\r\n    if (!_startsWith(tok, \"((r.\") && !_startsWith(tok, \"r.\")) {\r\n        return tok;\r\n    }\r\n    // if in form ((r.class.property))\r\n    else if (_startsWith(tok, \"((r.\")) {\r\n        tok = tok.substring(4, (tok.length - 2));\r\n    }\r\n    // else remove the \"r.\" from the begining\r\n    else {\r\n        tok = tok.substr(2);\r\n    }\r\n    // DEPRECATED\r\n    // If prev if_reacto resulted in FALSE\r\n    // No Need to process this reacto\r\n    // Reset _ifResult and\r\n    // Just return blank\r\n    // if(!get_ifResult()) {\r\n    //     set_ifResult(true)\r\n    //     return '';\r\n    // }\r\n    ///////////////////////////////////////\r\n    // Now create the reducer staircase\r\n    if (_startsWith(tok, \"dt.\")) {\r\n        interpretedTxt = _interpret_dt(tok.substr(3), skipLTP); //remove \"dt.\" and send for interpretation\"\r\n        setPrevReacto({ name: 'dt' });\r\n    }\r\n    // if it is a Config Reacto i.e. it looks like (r.cfg.key.value)\r\n    else if (_startsWith(tok, \"cfg.\")) {\r\n        interpretedTxt = _interpret_cfg(tok.substr(4)); //remove \"cfg.\" and send for interpretation\"\r\n        setPrevReacto({ name: 'cfg' });\r\n    }\r\n    // if it is a Var Reacto i.e. it looks like (r.var.key1)\r\n    else if (_startsWith(tok, \"var.\")) {\r\n        interpretedTxt = _interpret_var(tok.substr(4)); //remove \"var.\" and send for interpretation\"\r\n        setPrevReacto({ name: 'var' });\r\n    }\r\n    // if it is a Calc Reacto i.e. it looks like ((r.calc. n1 OP n2))\r\n    else if (_startsWith(tok, \"calc.\")) {\r\n        interpretedTxt = _interpret_calc(tok.substr(5), skipLTP); //remove \"var.\" and send for interpretation\"\r\n        setPrevReacto({ name: 'calc' });\r\n    }\r\n    // if it a Conditional IF statement, WOW\r\n    else if (_startsWith(tok, \"if.\")) {\r\n        interpretedTxt = _interpret_if(tok.substr(3)); //remove \"if.\" and send for interpretation\"\r\n    }\r\n    // if it is a Functional Reacto,\r\n    else if (_startsWith(tok, \"fn.\")) {\r\n        interpretedTxt = _interpret_fn(tok.substr(3)); //remove \"fn.\" and send for interpretation\"\r\n        setPrevReacto({ name: 'fn' });\r\n    }\r\n    // if it is an internal Block Reacto\r\n    // ((r._block.ID))\r\n    else if (_startsWith(tok, \"_block.\")) {\r\n        interpretedTxt = _interpret_blk(tok.substr(7)); //remove \"_block.\" and send for interpretation\"\r\n        setPrevReacto({ name: '_block' });\r\n    }\r\n    // No Valid Class Found \r\n    // i.e. ((r.SOME_INVALID_CLASS))\r\n    else {\r\n        interpretedTxt = '';\r\n    }\r\n    return interpretedTxt;\r\n}\r\nexport default _interpret;\r\n//# sourceMappingURL=interpret.js.map","import { _findAndProcessReactos } from '../processor';\r\nimport { getPrevReacto } from '../services/system';\r\n/*\r\n* This variable will store all {{ ... }} blocks\r\n* with key being some id\r\n* value being this block\r\n*/\r\nlet _rBlocks = {};\r\nexport { _preReplaceBlocks, _interpret_blk };\r\n/*\r\n* All \"{{ ... }}\" blocks will be replaced with\r\n* ((r._block.ID)) reactos\r\n*\r\n* These internal ((r._block.ID)) reacto blocks will be processed later\r\n*/\r\nfunction _preReplaceBlocks(rTxt) {\r\n    _rBlocks = {};\r\n    var blockCount = 0;\r\n    var nTxt = rTxt.replace(/{{(.|\\n)*?}}/g, function (rBlock) {\r\n        var ID = ++blockCount;\r\n        _rBlocks[ID] = rBlock;\r\n        return \"((r._block.\" + ID + \"))\";\r\n    });\r\n    return nTxt;\r\n}\r\n/*\r\n* This function receives a BlockID\r\n* Gets corressponding block from\r\n*/\r\nfunction _interpret_blk(blockID) {\r\n    let prevReacto = getPrevReacto();\r\n    let block = '';\r\n    // Block will be executed IF\r\n    // Either prev reacto was not a condition\r\n    // OR\r\n    // IF it was a conditional, resulted in true\r\n    if (prevReacto.name !== 'if' || (prevReacto.name === 'if' && prevReacto.data === true)) {\r\n        block = _rBlocks[blockID];\r\n        block = block.substring(2, block.length - 2); //remove starting \"{{\" and ending \"}}\"\r\n        block = _findAndProcessReactos(block);\r\n    }\r\n    delete _rBlocks[blockID]; // free the memory\r\n    return block;\r\n}\r\n//# sourceMappingURL=blocks.js.map","/*\r\n* /\\(\\(r\\.(.)*?\\)\\)/gs\r\n*\r\n* This regex matches anything that starts with \"((r.\"\r\n* And ends with \"))\"\r\n* It can go multiline\r\n* It can contain single \"(\" and \")\"\r\n* It can contain \"( (\", i.e. double ( with space in between\r\n*\r\n* This function receives entire rTxt\r\n* It will go thru all ((r.eacto)) one by one\r\n* and send for processing\r\n*\r\n*/\r\nimport { _interpret } from './interpreters/index';\r\nimport { isPrintOff } from './services/system';\r\nfunction _findAndProcessReactos(rTxt) {\r\n    let nTxt = rTxt.replace(/\\(\\(r\\.(.)*?\\)\\)/gs, function (rToken) {\r\n        let val = '';\r\n        // TRY CATCH, IF REACTO INTERPRETER FAILS\r\n        // FOR ANY OF THE REACTOS\r\n        try {\r\n            val = _interpret(rToken);\r\n        }\r\n        catch (err) {\r\n            console.log(err);\r\n        }\r\n        finally {\r\n            // Whatever it is, the final output must be a string\r\n            // Check undefined, because some reactos r.if. doesnot return anything\r\n            if (typeof (val) === 'undefined')\r\n                val = '';\r\n            val = val.toString();\r\n        }\r\n        if (isPrintOff()) {\r\n            val = '';\r\n        }\r\n        return val;\r\n    });\r\n    return nTxt.trim();\r\n}\r\nexport { _findAndProcessReactos };\r\n//# sourceMappingURL=processor.js.map","/*\r\n    Project: Reactive Tokens (reactos)\r\n    Author: Suman Barick\r\n    \r\n    Definition:\r\n    All the reactos wil have the structure ((r.namespace.fn))\r\n\r\n    /\\(\\(r\\.(.|\\n)*?\\)\\)/g\r\n\r\n    This regex matches anything that starts with \"((r.\"\r\n    And ends with \"))\"\r\n    It can go multiline\r\n    It can contain single \"(\" and \")\"\r\n    It can contain \"( (\", i.e. double ( with space in between\r\n*/\r\nconst version = '1.1.0';\r\nimport { _preReplaceBlocks } from './modules/interpreters/blocks';\r\nimport { _findAndProcessReactos } from './modules/processor';\r\nimport { _eatUnwantedNL } from './modules/services/util';\r\nimport { addFn, getFnList } from './modules/interpreters/fn';\r\nimport { getAllVars, setAllVars, resetVars } from './modules/interpreters/var';\r\nimport { getLocales, numToLocale } from './modules/services/locale';\r\n/*\r\n* Input: Text with reactos\r\n* Output: Text will all the reactos resolved\r\n* This function will go thru all the RTOs and process them one by one\r\n* And replace them in the new string\r\n*/\r\nexport const process = (txt) => {\r\n    return _startProcessing(txt);\r\n};\r\nfunction _startProcessing(rTxt) {\r\n    let nTxt = _preReplaceBlocks(rTxt);\r\n    nTxt = _findAndProcessReactos(nTxt);\r\n    nTxt = _eatUnwantedNL(nTxt);\r\n    return nTxt;\r\n}\r\n// @ts-ignore\r\nwindow.rto = {\r\n    getVersion: () => version,\r\n    process,\r\n    addFn,\r\n    getFnList,\r\n    getAllVars,\r\n    setAllVars,\r\n    resetVars,\r\n    getLocales,\r\n    numToLocale\r\n};\r\n//# sourceMappingURL=index.js.map"],"sourceRoot":""}