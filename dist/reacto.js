!function(e){var a={};function t(n){if(a[n])return a[n].exports;var r=a[n]={i:n,l:!1,exports:{}};return e[n].call(r.exports,r,r.exports,t),r.l=!0,r.exports}t.m=e,t.c=a,t.d=function(e,a,n){t.o(e,a)||Object.defineProperty(e,a,{enumerable:!0,get:n})},t.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},t.t=function(e,a){if(1&a&&(e=t(e)),8&a)return e;if(4&a&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(t.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&a&&"string"!=typeof e)for(var r in e)t.d(n,r,function(a){return e[a]}.bind(null,r));return n},t.n=function(e){var a=e&&e.__esModule?function(){return e.default}:function(){return e};return t.d(a,"a",a),a},t.o=function(e,a){return Object.prototype.hasOwnProperty.call(e,a)},t.p="",t(t.s=0)}([function(e,a,t){"use strict";function n(e){let a=S(e,!0);return isNaN(a)?a:Number(a)}function r(e,a){return!(!e||!a)&&e.substr(0,a.length)===a}t.r(a),t.d(a,"process",(function(){return T}));let i={};const o=e=>i=Object.assign(Object.assign({},i),e),s=e=>void 0!==i[e]?i[e].toString():"",l=e=>{if(e.indexOf("=")>-1){var a=e.split("="),t=a[0].trim(),n=a[1].trim();return n=r(n,"r.")?S(n,!0):n,o=n,i[t]=o,""}{let a=s(e.toString().trim());const t="r.var.";return a=a.split(" ").map(e=>{if(r(e,t)){let a=s(e.substr(t.length));void 0!==a&&(e=a)}return e}).join(" "),a}var o},u={ab:"аҧсуа бызшәа, аҧсшәа",aa:"Afaraf",af:"Afrikaans",ak:"Akan",sq:"Shqip",am:"አማርኛ",ar:"العربية",an:"aragonés",hy:"Հայերեն",as:"অসমীয়া",av:"авар мацӀ, магӀарул мацӀ",ae:"avesta",ay:"aymar aru",az:"azərbaycan dili, تۆرکجه",bm:"bamanankan",ba:"башҡорт теле",eu:"euskara, euskera",be:"беларуская мова",bn:"বাংলা",bh:"भोजपुरी",bi:"Bislama",bs:"bosanski jezik",br:"brezhoneg",bg:"български език",my:"ဗမာစာ",ca:"català, valencià",ch:"Chamoru",ce:"нохчийн мотт",ny:"chiCheŵa, chinyanja",zh:"中文 (Zhōngwén), 汉语, 漢語",cv:"чӑваш чӗлхи",kw:"Kernewek",co:"corsu, lingua corsa",cr:"ᓀᐦᐃᔭᐍᐏᐣ",hr:"hrvatski jezik",cs:"čeština, český jazyk",da:"dansk",dv:"ދިވެހި",nl:"Nederlands, Vlaams",dz:"རྫོང་ཁ",en:"English",eo:"Esperanto",et:"eesti, eesti keel",ee:"Eʋegbe",fo:"føroyskt",fj:"vosa Vakaviti",fi:"suomi, suomen kieli",fr:"français, langue française",ff:"Fulfulde, Pulaar, Pular",gl:"Galego",ka:"ქართული",de:"Deutsch",el:"ελληνικά",gn:"Avañe'ẽ",gu:"ગુજરાતી",ht:"Kreyòl ayisyen",ha:"(Hausa) هَوُسَ",he:"עברית",hz:"Otjiherero",hi:"हिन्दी, हिंदी",ho:"Hiri Motu",hu:"magyar",ia:"Interlingua",id:"Bahasa Indonesia",ie:"(originally:) Occidental, (after WWII:) Interlingue",ga:"Gaeilge",ig:"Asụsụ Igbo",ik:"Iñupiaq, Iñupiatun",io:"Ido",is:"Íslenska",it:"Italiano",iu:"ᐃᓄᒃᑎᑐᑦ",ja:"日本語 (にほんご)",jv:"ꦧꦱꦗꦮ, Basa Jawa",kl:"kalaallisut, kalaallit oqaasii",kn:"ಕನ್ನಡ",kr:"Kanuri",ks:"कश्मीरी, كشميري‎",kk:"қазақ тілі",km:"ខ្មែរ, ខេមរភាសា, ភាសាខ្មែរ",ki:"Gĩkũyũ",rw:"Ikinyarwanda",ky:"Кыргызча, Кыргыз тили",kv:"коми кыв",kg:"Kikongo",ko:"한국어",ku:"Kurdî, کوردی‎",kj:"Kuanyama",la:"latine, lingua latina",lb:"Lëtzebuergesch",lg:"Luganda",li:"Limburgs",ln:"Lingála",lo:"ພາສາລາວ",lt:"lietuvių kalba",lu:"Kiluba",lv:"latviešu valoda",gv:"Gaelg, Gailck",mk:"македонски јазик",mg:"fiteny malagasy",ms:"Bahasa Melayu, بهاس ملايو‎",ml:"മലയാളം",mt:"Malti",mi:"te reo Māori",mr:"मराठी",mh:"Kajin M̧ajeļ",mn:"Монгол хэл",na:"Dorerin Naoero",nv:"Diné bizaad",nd:"isiNdebele",ne:"नेपाली",ng:"Owambo",nb:"Norsk Bokmål",nn:"Norsk Nynorsk",no:"Norsk",ii:"ꆈꌠ꒿ Nuosuhxop",nr:"isiNdebele",oc:"occitan, lenga d'òc",oj:"ᐊᓂᔑᓈᐯᒧᐎᓐ",cu:"ѩзыкъ словѣньскъ",om:"Afaan Oromoo",or:"ଓଡ଼ିଆ",os:"ирон æвзаг",pa:"ਪੰਜਾਬੀ, پنجابی‎",pi:"पालि, पाळि",fa:"فارسی",pl:"język polski, polszczyzna",ps:"پښتو",pt:"Português",qu:"Runa Simi, Kichwa",rm:"Rumantsch Grischun",rn:"Ikirundi",ro:"Română",ru:"русский",sa:"संस्कृतम्",sc:"sardu",sd:"सिन्धी, سنڌي، سندھی‎",se:"Davvisámegiella",sm:"gagana fa'a Samoa",sg:"yângâ tî sängö",sr:"српски језик",gd:"Gàidhlig",sn:"chiShona",si:"සිංහල",sk:"Slovenčina, Slovenský jazyk",sl:"Slovenski jezik, Slovenščina",so:"Soomaaliga, af Soomaali",st:"Sesotho",es:"Español",su:"Basa Sunda",sw:"Kiswahili",ss:"SiSwati",sv:"Svenska",ta:"தமிழ்",te:"తెలుగు",tg:"тоҷикӣ, toçikī, تاجیکی‎",th:"ไทย",ti:"ትግርኛ",bo:"བོད་ཡིག",tk:"Türkmen, Түркмен",tl:"Wikang Tagalog",tn:"Setswana",to:"Faka Tonga",tr:"Türkçe",ts:"Xitsonga",tt:"татар теле, tatar tele",tw:"Twi",ty:"Reo Tahiti",ug:"ئۇيغۇرچە‎, Uyghurche",uk:"Українська",ur:"اردو",uz:"Oʻzbek, Ўзбек, أۇزبېك‎",ve:"Tshivenḓa",vi:"Tiếng Việt",vo:"Volapük",wa:"Walon",cy:"Cymraeg",wo:"Wollof",fy:"Frysk",xh:"isiXhosa",yi:"ייִדיש",yo:"Yorùbá",za:"Saɯ cueŋƅ, Saw cuengh",zu:"isiZulu"};let c="en";const f=()=>Object.assign({},u),m=e=>new Intl.NumberFormat(c).format(e);let g=[];var d=function(e,a){let t;if(e.indexOf("+")>=0){let a=e.split("+");const r=n(a[0]),i=n(a[1]);isNaN(r)||isNaN(i)||(t=r+i)}else if(e.indexOf("-")>=0){let a=e.split("-");const r=n(a[0]),i=n(a[1]);isNaN(r)||isNaN(i)||(t=r-i)}else if(e.indexOf("*")>=0){let a=e.split("*");const r=n(a[0]),i=n(a[1]);isNaN(r)||isNaN(i)||(t=r*i)}else if(e.indexOf("/")>=0){let a=e.split("/");const r=n(a[0]),i=n(a[1]);isNaN(r)||isNaN(i)||(t=r/i)}return void 0!==t&&(g.push(t),function(){const e=g.length,a={};for(let t=1;t<=e;t++)a["_"+t]=g[e-t];o(a)}()),a||void 0===t||(t=m(t)),void 0!==t?t.toString():""};let k=!1,b={name:"",data:""};const h=e=>k=e,y=()=>b,p=e=>b=e;var v=function(e){if(r(e,"setLocale")){var a=e.replace("setLocale.","").trim();t=a,Object.keys(u).includes(t)?c=t:(console.log("The passed locale code "+t+" is not a valid local codes."),console.log("For your help, this are valid locales -"),console.log(JSON.stringify(f(),null,4)))}else"printOff"===e?h(!0):"printOn"===e&&h(!1);var t;return""};const w=(e,a)=>{new Date;const t=Date.now(),n=a?"en":c;switch(e){case"year":return new Intl.DateTimeFormat(n,{year:"numeric"}).format(t);case"date":return new Intl.DateTimeFormat(n,{day:"numeric"}).format(t);case"hour":return new Intl.DateTimeFormat(n,{hour:"numeric",hourCycle:"h12"}).format(t);case"hour24":return new Intl.DateTimeFormat(n,{hour:"numeric",hourCycle:"h23"}).format(t);case"min":return new Intl.DateTimeFormat(n,{minute:"numeric"}).format(t);case"sec":return new Intl.DateTimeFormat(n,{second:"numeric"}).format(t);case"day":return new Intl.DateTimeFormat(n,{weekday:"long"}).format(t);case"month":return new Intl.DateTimeFormat(n,{month:"long"}).format(t)}return""};let O={};let N="";const j=e=>{let a;if((e=function(e){r(e,"and.")?(e=e.substr(4),N="AND"):r(e,"or.")?(e=e.substr(3),N="OR"):N="";return e}(e)).indexOf("!=")>=0){let t=e.split("!=");a=n(t[0])!=n(t[1])}else if(e.indexOf(">=")>=0){let t=e.split(">=");a=n(t[0])>=n(t[1])}else if(e.indexOf("<=")>=0){let t=e.split("<=");a=n(t[0])<=n(t[1])}else if(e.indexOf("=")>=0){let t=e.split("=");a=n(t[0])==n(t[1])}else if(e.indexOf(">")>=0){let t=e.split(">");a=n(t[0])>n(t[1])}else{if(!(e.indexOf("<")>=0))return e;{let t=e.split("<");a=n(t[0])<n(t[1])}}if(void 0!==a){if(N){const e=y();if("if"===e.name){let t=Boolean(e.data);a="AND"===N?t&&a:t||a}}p({name:"if",data:a})}return""};var S=function(e,a=!1){a=a||!1;let t="",n=e.trim();return r(n,"((r.")||r(n,"r.")?(n=r(n,"((r.")?n.substring(4,n.length-2):n.substr(2),r(n,"dt.")?(t=w(n.substr(3),a),p({name:"dt"})):r(n,"cfg.")?(t=v(n.substr(4)),p({name:"cfg"})):r(n,"var.")?(t=l(n.substr(4)),p({name:"var"})):r(n,"calc.")?(t=d(n.substr(5),a),p({name:"calc"})):r(n,"if.")?t=j(n.substr(3)):r(n,"fn.")?(t=(e=>{let a="",t=e.trim(),n=[];if(e.indexOf(",,")>=0){let a=e.split(",,");t=a[0].trim(),n=a.slice(1).map(e=>e.trim())}return O[t]&&"function"==typeof O[t]&&(a=O[t].apply(window,n)),a})(n.substr(3)),p({name:"fn"})):r(n,"_block.")?(t=function(e){let a=y(),t="";("if"!==a.name||"if"===a.name&&!0===a.data)&&(t=I[e],t=t.substring(2,t.length-2),t=z(t));return delete I[e],t}(n.substr(7)),p({name:"_block"})):t="",t):n};function z(e){return e.replace(/\(\(r\.(.)*?\)\)/gs,(function(e){let a="";try{a=S(e)}catch(e){console.log(e)}finally{void 0===a&&(a=""),a=a.toString()}return k&&(a=""),a}))}let I={};const T=e=>function(e){let a=function(e){I={};var a=0;return e.replace(/{{(.|\n)*?}}/g,(function(e){var t=++a;return I[t]=e,"((r._block."+t+"))"}))}(e);return a=z(a),a=function(e){for(e=e.replace(/\\(\r\n|\r|\n)/g,"").trim();"\\"===e[e.length-1];)e=e.substr(0,e.length-1);return e}(a),a}(e);window.rto={getVersion:()=>"1.1.0",process:T,addFn:(e,a)=>O[e]=a,getFnList:()=>Object.keys(O),getAllVars:()=>Object.assign({},i),setAllVars:o,resetVars:()=>i={},getLocales:f,numToLocale:m}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vZGlzdC90cmFuc3BpbGVkLXRzLWpzL21vZHVsZXMvc2VydmljZXMvdXRpbC5qcyIsIndlYnBhY2s6Ly8vLi9kaXN0L3RyYW5zcGlsZWQtdHMtanMvbW9kdWxlcy9pbnRlcnByZXRlcnMvdmFyLmpzIiwid2VicGFjazovLy8uL2Rpc3QvdHJhbnNwaWxlZC10cy1qcy9tb2R1bGVzL3NlcnZpY2VzL2xvY2FsZS5qcyIsIndlYnBhY2s6Ly8vLi9kaXN0L3RyYW5zcGlsZWQtdHMtanMvbW9kdWxlcy9pbnRlcnByZXRlcnMvY2FsYy5qcyIsIndlYnBhY2s6Ly8vLi9kaXN0L3RyYW5zcGlsZWQtdHMtanMvbW9kdWxlcy9zZXJ2aWNlcy9zeXN0ZW0uanMiLCJ3ZWJwYWNrOi8vLy4vZGlzdC90cmFuc3BpbGVkLXRzLWpzL21vZHVsZXMvaW50ZXJwcmV0ZXJzL2NmZy5qcyIsIndlYnBhY2s6Ly8vLi9kaXN0L3RyYW5zcGlsZWQtdHMtanMvbW9kdWxlcy9pbnRlcnByZXRlcnMvZHQuanMiLCJ3ZWJwYWNrOi8vLy4vZGlzdC90cmFuc3BpbGVkLXRzLWpzL21vZHVsZXMvaW50ZXJwcmV0ZXJzL2ZuLmpzIiwid2VicGFjazovLy8uL2Rpc3QvdHJhbnNwaWxlZC10cy1qcy9tb2R1bGVzL2ludGVycHJldGVycy9pZi5qcyIsIndlYnBhY2s6Ly8vLi9kaXN0L3RyYW5zcGlsZWQtdHMtanMvbW9kdWxlcy9pbnRlcnByZXRlcnMvaW50ZXJwcmV0LmpzIiwid2VicGFjazovLy8uL2Rpc3QvdHJhbnNwaWxlZC10cy1qcy9tb2R1bGVzL2ludGVycHJldGVycy9ibG9ja3MuanMiLCJ3ZWJwYWNrOi8vLy4vZGlzdC90cmFuc3BpbGVkLXRzLWpzL21vZHVsZXMvcHJvY2Vzc29yLmpzIiwid2VicGFjazovLy8uL2Rpc3QvdHJhbnNwaWxlZC10cy1qcy9pbmRleC5qcyJdLCJuYW1lcyI6WyJpbnN0YWxsZWRNb2R1bGVzIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiZXhwb3J0cyIsIm1vZHVsZSIsImkiLCJsIiwibW9kdWxlcyIsImNhbGwiLCJtIiwiYyIsImQiLCJuYW1lIiwiZ2V0dGVyIiwibyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImdldCIsInIiLCJTeW1ib2wiLCJ0b1N0cmluZ1RhZyIsInZhbHVlIiwidCIsIm1vZGUiLCJfX2VzTW9kdWxlIiwibnMiLCJjcmVhdGUiLCJrZXkiLCJiaW5kIiwibiIsIm9iamVjdCIsInByb3BlcnR5IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJwIiwicyIsIl9wcmVwVmFsRm9yTWF0aHMiLCJ0b2siLCJ2IiwiaXNOYU4iLCJOdW1iZXIiLCJfc3RhcnRzV2l0aCIsInN0ciIsInBhcnQiLCJzdWJzdHIiLCJsZW5ndGgiLCJfcHJpdmF0ZVZhcnMiLCJzZXRBbGxWYXJzIiwia3ZQYWlycyIsImFzc2lnbiIsIl9nZXRWYXIiLCJrIiwidG9TdHJpbmciLCJfaW50ZXJwcmV0X3ZhciIsInRva2VuIiwiaW5kZXhPZiIsInBhcnRzIiwic3BsaXQiLCJ0cmltIiwidmFsIiwiUl9WQVIiLCJtYXAiLCJyZWFsVmFsdWUiLCJqb2luIiwiTE9DQUxFUyIsImN1cnJlbnRMb2NhbGUiLCJnZXRMb2NhbGVzIiwibnVtVG9Mb2NhbGUiLCJudW0iLCJJbnRsIiwiTnVtYmVyRm9ybWF0IiwiZm9ybWF0IiwiYWxsQ2FsY1Jlc3VsdHMiLCJza2lwVHJhbnNsYXRpb24iLCJyZXN1bHQiLCJvcDEiLCJvcDIiLCJwdXNoIiwibGVuIiwicmVzIiwiX2NyZWF0ZVNwZWNpYWxDYWxjVmFyIiwiX19faXNQcmludE9mZiIsIl9fX3ByZXZSZWFjdG8iLCJkYXRhIiwic2V0UHJpbnRPZmYiLCJnZXRQcmV2UmVhY3RvIiwic2V0UHJldlJlYWN0byIsImxhbmdDb2RlIiwicmVwbGFjZSIsImxvY2FsZUNvZGUiLCJrZXlzIiwiaW5jbHVkZXMiLCJjb25zb2xlIiwibG9nIiwiSlNPTiIsInN0cmluZ2lmeSIsIl9pbnRlcnByZXRfZHQiLCJyVG9rZW4iLCJEYXRlIiwiZG5vdyIsIm5vdyIsImxvY2FsZSIsIkRhdGVUaW1lRm9ybWF0IiwieWVhciIsImRheSIsImhvdXIiLCJob3VyQ3ljbGUiLCJtaW51dGUiLCJzZWNvbmQiLCJ3ZWVrZGF5IiwibW9udGgiLCJmbnMiLCJfY2hhaW5pbmdDb25kaXRpb24iLCJfaW50ZXJwcmV0X2lmIiwiX2RldGVybWluZUNoYW5pbmdDb25kaXRpb24iLCJwcmV2UmVhY3RvIiwicHJldlJlc3VsdCIsIkJvb2xlYW4iLCJhUmVhY3RvIiwiaW50ZXJwcmV0ZWRUeHQiLCJzdWJzdHJpbmciLCJmbkRhdGEiLCJmbk5hbWUiLCJwYXJhbXMiLCJzbGljZSIsImFwcGx5Iiwid2luZG93IiwiX2ludGVycHJldF9mbiIsImJsb2NrSUQiLCJibG9jayIsIl9yQmxvY2tzIiwiX2ZpbmRBbmRQcm9jZXNzUmVhY3RvcyIsIl9pbnRlcnByZXRfYmxrIiwiclR4dCIsImVyciIsInByb2Nlc3MiLCJ0eHQiLCJuVHh0IiwiYmxvY2tDb3VudCIsInJCbG9jayIsIklEIiwiX3ByZVJlcGxhY2VCbG9ja3MiLCJfZWF0VW53YW50ZWROTCIsIl9zdGFydFByb2Nlc3NpbmciLCJydG8iLCJnZXRWZXJzaW9uIiwiYWRkRm4iLCJmbiIsImdldEZuTGlzdCIsImdldEFsbFZhcnMiLCJyZXNldFZhcnMiXSwibWFwcGluZ3MiOiJhQUNFLElBQUlBLEVBQW1CLEdBR3ZCLFNBQVNDLEVBQW9CQyxHQUc1QixHQUFHRixFQUFpQkUsR0FDbkIsT0FBT0YsRUFBaUJFLEdBQVVDLFFBR25DLElBQUlDLEVBQVNKLEVBQWlCRSxHQUFZLENBQ3pDRyxFQUFHSCxFQUNISSxHQUFHLEVBQ0hILFFBQVMsSUFVVixPQU5BSSxFQUFRTCxHQUFVTSxLQUFLSixFQUFPRCxRQUFTQyxFQUFRQSxFQUFPRCxRQUFTRixHQUcvREcsRUFBT0UsR0FBSSxFQUdKRixFQUFPRCxRQUtmRixFQUFvQlEsRUFBSUYsRUFHeEJOLEVBQW9CUyxFQUFJVixFQUd4QkMsRUFBb0JVLEVBQUksU0FBU1IsRUFBU1MsRUFBTUMsR0FDM0NaLEVBQW9CYSxFQUFFWCxFQUFTUyxJQUNsQ0csT0FBT0MsZUFBZWIsRUFBU1MsRUFBTSxDQUFFSyxZQUFZLEVBQU1DLElBQUtMLEtBS2hFWixFQUFvQmtCLEVBQUksU0FBU2hCLEdBQ1gsb0JBQVhpQixRQUEwQkEsT0FBT0MsYUFDMUNOLE9BQU9DLGVBQWViLEVBQVNpQixPQUFPQyxZQUFhLENBQUVDLE1BQU8sV0FFN0RQLE9BQU9DLGVBQWViLEVBQVMsYUFBYyxDQUFFbUIsT0FBTyxLQVF2RHJCLEVBQW9Cc0IsRUFBSSxTQUFTRCxFQUFPRSxHQUV2QyxHQURVLEVBQVBBLElBQVVGLEVBQVFyQixFQUFvQnFCLElBQy9CLEVBQVBFLEVBQVUsT0FBT0YsRUFDcEIsR0FBVyxFQUFQRSxHQUE4QixpQkFBVkYsR0FBc0JBLEdBQVNBLEVBQU1HLFdBQVksT0FBT0gsRUFDaEYsSUFBSUksRUFBS1gsT0FBT1ksT0FBTyxNQUd2QixHQUZBMUIsRUFBb0JrQixFQUFFTyxHQUN0QlgsT0FBT0MsZUFBZVUsRUFBSSxVQUFXLENBQUVULFlBQVksRUFBTUssTUFBT0EsSUFDdEQsRUFBUEUsR0FBNEIsaUJBQVRGLEVBQW1CLElBQUksSUFBSU0sS0FBT04sRUFBT3JCLEVBQW9CVSxFQUFFZSxFQUFJRSxFQUFLLFNBQVNBLEdBQU8sT0FBT04sRUFBTU0sSUFBUUMsS0FBSyxLQUFNRCxJQUM5SSxPQUFPRixHQUlSekIsRUFBb0I2QixFQUFJLFNBQVMxQixHQUNoQyxJQUFJUyxFQUFTVCxHQUFVQSxFQUFPcUIsV0FDN0IsV0FBd0IsT0FBT3JCLEVBQWdCLFNBQy9DLFdBQThCLE9BQU9BLEdBRXRDLE9BREFILEVBQW9CVSxFQUFFRSxFQUFRLElBQUtBLEdBQzVCQSxHQUlSWixFQUFvQmEsRUFBSSxTQUFTaUIsRUFBUUMsR0FBWSxPQUFPakIsT0FBT2tCLFVBQVVDLGVBQWUxQixLQUFLdUIsRUFBUUMsSUFHekcvQixFQUFvQmtDLEVBQUksR0FJakJsQyxFQUFvQkEsRUFBb0JtQyxFQUFJLEcsK0JDNUVyRCxTQUFTQyxFQUFpQkMsR0FDdEIsSUFBSUMsRUFBSSxFQUFXRCxHQUFLLEdBRXhCLE9BQUtFLE1BQU1ELEdBSUpBLEVBSElFLE9BQU9GLEdBdUJ0QixTQUFTRyxFQUFZQyxFQUFLQyxHQUN0QixTQUFLRCxJQUFRQyxJQUVORCxFQUFJRSxPQUFPLEVBQUdELEVBQUtFLFVBQVlGLEUsK0NDbEIxQyxJQUFJRyxFQUFlLEdBQ1osTUFDTUMsRUFBY0MsR0FBWUYsRUFBZWhDLE9BQU9tQyxPQUFPbkMsT0FBT21DLE9BQU8sR0FBSUgsR0FBZUUsR0FFeEZFLEVBQVdDLFFBQW9DLElBQXJCTCxFQUFhSyxHQUF1QkwsRUFBYUssR0FBR0MsV0FBYSxHQVMzRkMsRUFBa0JDLElBRTNCLEdBQUlBLEVBQU1DLFFBQVEsTUFBUSxFQUFHLENBQ3pCLElBQUlDLEVBQVFGLEVBQU1HLE1BQU0sS0FDcEI5QixFQUFNNkIsRUFBTSxHQUFHRSxPQUNmQyxFQUFNSCxFQUFNLEdBQUdFLE9BS25CLE9BRkFDLEVBQU1sQixFQUFZa0IsRUFBSyxNQUFRLEVBQVdBLEdBQUssR0FBUUEsRUFwQnBDckIsRUFxQk5xQixFQXJCWWIsRUFxQmpCbkIsR0FyQm1DVyxFQXNCcEMsR0FJTixDQUNELElBQUlqQixFQUFRNkIsRUFBUUksRUFBTUYsV0FBV00sUUFLckMsTUFBTUUsRUFBUSxTQVNkLE9BUkF2QyxFQUFRQSxFQUFNb0MsTUFBTSxLQUFLSSxJQUFJdkIsSUFDekIsR0FBSUcsRUFBWUgsRUFBR3NCLEdBQVEsQ0FDdkIsSUFBSUUsRUFBWVosRUFBUVosRUFBRU0sT0FBT2dCLEVBQU1mLGNBQ1osSUFBaEIsSUFDUFAsRUFBSXdCLEdBRVosT0FBT3hCLElBQ1J5QixLQUFLLEtBQ0QxQyxFQXpDUSxJQUFJaUIsR0NSckIwQixFQUFVLENBQ1osR0FBTSx1QkFDTixHQUFNLFNBQ04sR0FBTSxZQUNOLEdBQU0sT0FDTixHQUFNLFFBQ04sR0FBTSxPQUNOLEdBQU0sVUFDTixHQUFNLFdBQ04sR0FBTSxVQUNOLEdBQU0sVUFDTixHQUFNLDJCQUNOLEdBQU0sU0FDTixHQUFNLFlBQ04sR0FBTSwwQkFDTixHQUFNLGFBQ04sR0FBTSxlQUNOLEdBQU0sbUJBQ04sR0FBTSxrQkFDTixHQUFNLFFBQ04sR0FBTSxVQUNOLEdBQU0sVUFDTixHQUFNLGlCQUNOLEdBQU0sWUFDTixHQUFNLGlCQUNOLEdBQU0sUUFDTixHQUFNLG1CQUNOLEdBQU0sVUFDTixHQUFNLGVBQ04sR0FBTSxzQkFDTixHQUFNLHdCQUNOLEdBQU0sY0FDTixHQUFNLFdBQ04sR0FBTSxzQkFDTixHQUFNLFVBQ04sR0FBTSxpQkFDTixHQUFNLHVCQUNOLEdBQU0sUUFDTixHQUFNLFNBQ04sR0FBTSxxQkFDTixHQUFNLFNBQ04sR0FBTSxVQUNOLEdBQU0sWUFDTixHQUFNLG9CQUNOLEdBQU0sU0FDTixHQUFNLFdBQ04sR0FBTSxnQkFDTixHQUFNLHNCQUNOLEdBQU0sNkJBQ04sR0FBTSwwQkFDTixHQUFNLFNBQ04sR0FBTSxVQUNOLEdBQU0sVUFDTixHQUFNLFdBQ04sR0FBTSxVQUNOLEdBQU0sVUFDTixHQUFNLGlCQUNOLEdBQU0saUJBQ04sR0FBTSxRQUNOLEdBQU0sYUFDTixHQUFNLGdCQUNOLEdBQU0sWUFDTixHQUFNLFNBQ04sR0FBTSxjQUNOLEdBQU0sbUJBQ04sR0FBTSxzREFDTixHQUFNLFVBQ04sR0FBTSxhQUNOLEdBQU0scUJBQ04sR0FBTSxNQUNOLEdBQU0sV0FDTixHQUFNLFdBQ04sR0FBTSxTQUNOLEdBQU0sYUFDTixHQUFNLGtCQUNOLEdBQU0saUNBQ04sR0FBTSxRQUNOLEdBQU0sU0FDTixHQUFNLG1CQUNOLEdBQU0sYUFDTixHQUFNLDZCQUNOLEdBQU0sU0FDTixHQUFNLGVBQ04sR0FBTSx3QkFDTixHQUFNLFdBQ04sR0FBTSxVQUNOLEdBQU0sTUFDTixHQUFNLGdCQUNOLEdBQU0sV0FDTixHQUFNLHdCQUNOLEdBQU0saUJBQ04sR0FBTSxVQUNOLEdBQU0sV0FDTixHQUFNLFVBQ04sR0FBTSxVQUNOLEdBQU0saUJBQ04sR0FBTSxTQUNOLEdBQU0sa0JBQ04sR0FBTSxnQkFDTixHQUFNLG1CQUNOLEdBQU0sa0JBQ04sR0FBTSw2QkFDTixHQUFNLFNBQ04sR0FBTSxRQUNOLEdBQU0sZUFDTixHQUFNLFFBQ04sR0FBTSxlQUNOLEdBQU0sYUFDTixHQUFNLGlCQUNOLEdBQU0sY0FDTixHQUFNLGFBQ04sR0FBTSxTQUNOLEdBQU0sU0FDTixHQUFNLGVBQ04sR0FBTSxnQkFDTixHQUFNLFFBQ04sR0FBTSxnQkFDTixHQUFNLGFBQ04sR0FBTSxzQkFDTixHQUFNLFdBQ04sR0FBTSxtQkFDTixHQUFNLGVBQ04sR0FBTSxRQUNOLEdBQU0sYUFDTixHQUFNLGtCQUNOLEdBQU0sYUFDTixHQUFNLFFBQ04sR0FBTSw0QkFDTixHQUFNLE9BQ04sR0FBTSxZQUNOLEdBQU0sb0JBQ04sR0FBTSxxQkFDTixHQUFNLFdBQ04sR0FBTSxTQUNOLEdBQU0sVUFDTixHQUFNLFlBQ04sR0FBTSxRQUNOLEdBQU0sdUJBQ04sR0FBTSxrQkFDTixHQUFNLG9CQUNOLEdBQU0saUJBQ04sR0FBTSxlQUNOLEdBQU0sV0FDTixHQUFNLFdBQ04sR0FBTSxRQUNOLEdBQU0sOEJBQ04sR0FBTSwrQkFDTixHQUFNLDBCQUNOLEdBQU0sVUFDTixHQUFNLFVBQ04sR0FBTSxhQUNOLEdBQU0sWUFDTixHQUFNLFVBQ04sR0FBTSxVQUNOLEdBQU0sUUFDTixHQUFNLFNBQ04sR0FBTSwwQkFDTixHQUFNLE1BQ04sR0FBTSxPQUNOLEdBQU0sVUFDTixHQUFNLG1CQUNOLEdBQU0saUJBQ04sR0FBTSxXQUNOLEdBQU0sYUFDTixHQUFNLFNBQ04sR0FBTSxXQUNOLEdBQU0seUJBQ04sR0FBTSxNQUNOLEdBQU0sYUFDTixHQUFNLHVCQUNOLEdBQU0sYUFDTixHQUFNLE9BQ04sR0FBTSx5QkFDTixHQUFNLFlBQ04sR0FBTSxhQUNOLEdBQU0sVUFDTixHQUFNLFFBQ04sR0FBTSxVQUNOLEdBQU0sU0FDTixHQUFNLFFBQ04sR0FBTSxXQUNOLEdBQU0sU0FDTixHQUFNLFNBQ04sR0FBTSx3QkFDTixHQUFNLFdBRVYsSUFBSUMsRUFBZ0IsS0FDYixNQUFNQyxFQUFhLElBQU9wRCxPQUFPbUMsT0FBTyxHQUFJZSxHQXdCdENHLEVBQWVDLEdBQVEsSUFBSUMsS0FBS0MsYUFBYUwsR0FBZU0sT0FBT0gsR0NuTmhGLElBQUlJLEVBQWlCLEdBOEVOLE1BN0VmLFNBQXlCbkMsRUFBS29DLEdBQzFCLElBQUlDLEVBQ0osR0FBSXJDLEVBQUlrQixRQUFRLE1BQVEsRUFBRyxDQUN2QixJQUFJQyxFQUFRbkIsRUFBSW9CLE1BQU0sS0FDdEIsTUFBTWtCLEVBQU12QyxFQUFpQm9CLEVBQU0sSUFDN0JvQixFQUFNeEMsRUFBaUJvQixFQUFNLElBQzlCakIsTUFBTW9DLElBQVNwQyxNQUFNcUMsS0FDdEJGLEVBQVNDLEVBQU1DLFFBR2xCLEdBQUl2QyxFQUFJa0IsUUFBUSxNQUFRLEVBQUcsQ0FDNUIsSUFBSUMsRUFBUW5CLEVBQUlvQixNQUFNLEtBQ3RCLE1BQU1rQixFQUFNdkMsRUFBaUJvQixFQUFNLElBQzdCb0IsRUFBTXhDLEVBQWlCb0IsRUFBTSxJQUM5QmpCLE1BQU1vQyxJQUFTcEMsTUFBTXFDLEtBQ3RCRixFQUFTQyxFQUFNQyxRQUdsQixHQUFJdkMsRUFBSWtCLFFBQVEsTUFBUSxFQUFHLENBQzVCLElBQUlDLEVBQVFuQixFQUFJb0IsTUFBTSxLQUN0QixNQUFNa0IsRUFBTXZDLEVBQWlCb0IsRUFBTSxJQUM3Qm9CLEVBQU14QyxFQUFpQm9CLEVBQU0sSUFDOUJqQixNQUFNb0MsSUFBU3BDLE1BQU1xQyxLQUN0QkYsRUFBU0MsRUFBTUMsUUFHbEIsR0FBSXZDLEVBQUlrQixRQUFRLE1BQVEsRUFBRyxDQUM1QixJQUFJQyxFQUFRbkIsRUFBSW9CLE1BQU0sS0FDdEIsTUFBTWtCLEVBQU12QyxFQUFpQm9CLEVBQU0sSUFDN0JvQixFQUFNeEMsRUFBaUJvQixFQUFNLElBQzlCakIsTUFBTW9DLElBQVNwQyxNQUFNcUMsS0FDdEJGLEVBQVNDLEVBQU1DLEdBaUJ2QixZQWJ3QixJQUFiLElBQ1BKLEVBQWVLLEtBQUtILEdBZ0M1QixXQUNJLE1BQU1JLEVBQU1OLEVBQWUzQixPQUNyQmtDLEVBQU0sR0FDWixJQUFLLElBQUkzRSxFQUFJLEVBQUdBLEdBQUswRSxFQUFLMUUsSUFDdEIyRSxFQUFJLElBQUkzRSxHQUFPb0UsRUFBZU0sRUFBTTFFLEdBRXhDMkMsRUFBV2dDLEdBckNQQyxJQUVDUCxRQUN1QixJQUFiLElBS1BDLEVBQVNQLEVBQVlPLFNBR0YsSUFBYixFQUEyQkEsRUFBT3RCLFdBQWEsSUM1RGpFLElBQUk2QixHQUFnQixFQUNoQkMsRUFBZ0IsQ0FBRXZFLEtBQU0sR0FBSXdFLEtBQU0sSUFDL0IsTUFDTUMsRUFBZTlDLEdBQU0yQyxFQUFnQjNDLEVBQ3JDK0MsRUFBZ0IsSUFBTUgsRUFDdEJJLEVBQWlCcEUsR0FBTWdFLEVBQWdCaEUsRUNrQnJDLE1BZGYsU0FBd0JvQyxHQUVwQixHQUFJYixFQUFZYSxFQUFPLGFBQWMsQ0FDakMsSUFBSWlDLEVBQVdqQyxFQUFNa0MsUUFBUSxhQUFjLElBQUk5QixPSGtNdEIrQixFR2pNUkYsRUhrTWpCekUsT0FBTzRFLEtBQUsxQixHQUFTMkIsU0FBU0YsR0FDOUJ4QixFQUFnQndCLEdBR2hCRyxRQUFRQyxJQUFJLDBCQUE0QkosRUFBYSxnQ0FDckRHLFFBQVFDLElBQUksMkNBQ1pELFFBQVFDLElBQUlDLEtBQUtDLFVBQVU3QixJQUFjLEtBQU0sU0d0TWhDLGFBQVZaLEVBQ0w4QixHQUFZLEdBRUcsWUFBVjlCLEdBQ0w4QixHQUFZLEdIMkxZLElBQUNLLEVHekw3QixNQUFPLElDZEosTUFBTU8sRUFBZ0IsQ0FBQ0MsRUFBUXhCLEtBRTFCLElBQUl5QixLQUNaLE1BQU1DLEVBQU9ELEtBQUtFLE1BQ1pDLEVBQVM1QixFQUFrQixLSjhMQ1IsRUk3TGxDLE9BQVFnQyxHQUVKLElBQUssT0FFRCxPQUFPLElBQUk1QixLQUFLaUMsZUFBZUQsRUFBUSxDQUFFRSxLQUFNLFlBQWFoQyxPQUFPNEIsR0FFdkUsSUFBSyxPQUVELE9BQU8sSUFBSTlCLEtBQUtpQyxlQUFlRCxFQUFRLENBQUVHLElBQUssWUFBYWpDLE9BQU80QixHQUd0RSxJQUFLLE9BR0QsT0FBTyxJQUFJOUIsS0FBS2lDLGVBQWVELEVBQVEsQ0FBRUksS0FBTSxVQUFXQyxVQUFXLFFBQVNuQyxPQUFPNEIsR0FFekYsSUFBSyxTQUVELE9BQU8sSUFBSTlCLEtBQUtpQyxlQUFlRCxFQUFRLENBQUVJLEtBQU0sVUFBV0MsVUFBVyxRQUFTbkMsT0FBTzRCLEdBRXpGLElBQUssTUFDRCxPQUFPLElBQUk5QixLQUFLaUMsZUFBZUQsRUFBUSxDQUFFTSxPQUFRLFlBQWFwQyxPQUFPNEIsR0FFekUsSUFBSyxNQUNELE9BQU8sSUFBSTlCLEtBQUtpQyxlQUFlRCxFQUFRLENBQUVPLE9BQVEsWUFBYXJDLE9BQU80QixHQUV6RSxJQUFLLE1BRUQsT0FBTyxJQUFJOUIsS0FBS2lDLGVBQWVELEVBQVEsQ0FBRVEsUUFBUyxTQUFVdEMsT0FBTzRCLEdBRXZFLElBQUssUUFDRCxPQUFPLElBQUk5QixLQUFLaUMsZUFBZUQsRUFBUSxDQUFFUyxNQUFPLFNBQVV2QyxPQUFPNEIsR0FFekUsTUFyQ2EsSUNBakIsSUFBSVksRUFBTSxHQ0VWLElBQUlDLEVBQXFCLEdBcUJsQixNQUFNQyxFQUFpQjVFLElBQzFCLElBQUlxQyxFQUlKLElBREFyQyxFQXNESixTQUFvQ0EsR0FFNUJJLEVBQVlKLEVBQUssU0FDakJBLEVBQU1BLEVBQUlPLE9BQU8sR0FDakJvRSxFQUFxQixPQUdoQnZFLEVBQVlKLEVBQUssUUFDdEJBLEVBQU1BLEVBQUlPLE9BQU8sR0FDakJvRSxFQUFxQixNQU9yQkEsRUFBcUIsR0FFekIsT0FBTzNFLEVBeEVENkUsQ0FBMkI3RSxJQUN6QmtCLFFBQVEsT0FBUyxFQUFHLENBQ3hCLElBQUlDLEVBQVFuQixFQUFJb0IsTUFBTSxNQUN0QmlCLEVBQVN0QyxFQUFpQm9CLEVBQU0sS0FBT3BCLEVBQWlCb0IsRUFBTSxTQUU3RCxHQUFJbkIsRUFBSWtCLFFBQVEsT0FBUyxFQUFHLENBQzdCLElBQUlDLEVBQVFuQixFQUFJb0IsTUFBTSxNQUN0QmlCLEVBQVN0QyxFQUFpQm9CLEVBQU0sS0FBT3BCLEVBQWlCb0IsRUFBTSxTQUU3RCxHQUFJbkIsRUFBSWtCLFFBQVEsT0FBUyxFQUFHLENBQzdCLElBQUlDLEVBQVFuQixFQUFJb0IsTUFBTSxNQUN0QmlCLEVBQVN0QyxFQUFpQm9CLEVBQU0sS0FBT3BCLEVBQWlCb0IsRUFBTSxTQUU3RCxHQUFJbkIsRUFBSWtCLFFBQVEsTUFBUSxFQUFHLENBQzVCLElBQUlDLEVBQVFuQixFQUFJb0IsTUFBTSxLQUN0QmlCLEVBQVN0QyxFQUFpQm9CLEVBQU0sS0FBT3BCLEVBQWlCb0IsRUFBTSxTQUU3RCxHQUFJbkIsRUFBSWtCLFFBQVEsTUFBUSxFQUFHLENBQzVCLElBQUlDLEVBQVFuQixFQUFJb0IsTUFBTSxLQUN0QmlCLEVBQVN0QyxFQUFpQm9CLEVBQU0sSUFBTXBCLEVBQWlCb0IsRUFBTSxRQUU1RCxNQUFJbkIsRUFBSWtCLFFBQVEsTUFBUSxHQU96QixPQUFPbEIsRUFQcUIsQ0FDNUIsSUFBSW1CLEVBQVFuQixFQUFJb0IsTUFBTSxLQUN0QmlCLEVBQVN0QyxFQUFpQm9CLEVBQU0sSUFBTXBCLEVBQWlCb0IsRUFBTSxLQU9qRSxRQUF3QixJQUFiLEVBQTBCLENBRWpDLEdBQUl3RCxFQUFvQixDQUVwQixNQUFNRyxFQUFhOUIsSUFFbkIsR0FBd0IsT0FBcEI4QixFQUFXeEcsS0FBZSxDQUMxQixJQUFJeUcsRUFBYUMsUUFBUUYsRUFBV2hDLE1BQ3BDVCxFQUFnQyxRQUF2QnNDLEVBQWdDSSxHQUFjMUMsRUFBVzBDLEdBQWMxQyxHQUd4RlksRUFBYyxDQUNWM0UsS0FBTSxLQUNOd0UsS0FBTVQsSUFHZCxNQUFPLElDRkksTUFyRWYsU0FBb0I0QyxFQUFTN0MsR0FBa0IsR0FDM0NBLEVBQWtCQSxJQUFtQixFQUVyQyxJQUFJOEMsRUFBaUIsR0FDakJsRixFQUFNaUYsRUFBUTVELE9BRWxCLE9BQUtqQixFQUFZSixFQUFLLFNBQVlJLEVBQVlKLEVBQUssT0FLL0NBLEVBREtJLEVBQVlKLEVBQUssUUFDaEJBLEVBQUltRixVQUFVLEVBQUluRixFQUFJUSxPQUFTLEdBSS9CUixFQUFJTyxPQUFPLEdBYWpCSCxFQUFZSixFQUFLLFFBQ2pCa0YsRUFBaUJ2QixFQUFjM0QsRUFBSU8sT0FBTyxHQUFJNkIsR0FDOUNhLEVBQWMsQ0FBRTNFLEtBQU0sUUFHakI4QixFQUFZSixFQUFLLFNBQ3RCa0YsRUFBaUIsRUFBZWxGLEVBQUlPLE9BQU8sSUFDM0MwQyxFQUFjLENBQUUzRSxLQUFNLFNBR2pCOEIsRUFBWUosRUFBSyxTQUN0QmtGLEVBQWlCbEUsRUFBZWhCLEVBQUlPLE9BQU8sSUFDM0MwQyxFQUFjLENBQUUzRSxLQUFNLFNBR2pCOEIsRUFBWUosRUFBSyxVQUN0QmtGLEVBQWlCLEVBQWdCbEYsRUFBSU8sT0FBTyxHQUFJNkIsR0FDaERhLEVBQWMsQ0FBRTNFLEtBQU0sVUFHakI4QixFQUFZSixFQUFLLE9BQ3RCa0YsRUFBaUJOLEVBQWM1RSxFQUFJTyxPQUFPLElBR3JDSCxFQUFZSixFQUFLLFFBQ3RCa0YsRUY1Q3FCLENBQUNFLElBQzFCLElBQUkxQyxFQUFNLEdBQ04yQyxFQUFTRCxFQUFPL0QsT0FDaEJpRSxFQUFTLEdBR2IsR0FBSUYsRUFBT2xFLFFBQVEsT0FBUyxFQUFHLENBQzNCLElBQUlDLEVBQVFpRSxFQUFPaEUsTUFBTSxNQUN6QmlFLEVBQVNsRSxFQUFNLEdBQUdFLE9BQ2xCaUUsRUFBU25FLEVBQU1vRSxNQUFNLEdBQUcvRCxJQUFJdkIsR0FBS0EsRUFBRW9CLFFBS3ZDLE9BSElxRCxFQUFJVyxJQUFvQyxtQkFBakJYLEVBQUlXLEtBQzNCM0MsRUFBTWdDLEVBQUlXLEdBQVFHLE1BQU1DLE9BQVFILElBRTdCNUMsR0U4QmNnRCxDQUFjMUYsRUFBSU8sT0FBTyxJQUMxQzBDLEVBQWMsQ0FBRTNFLEtBQU0sUUFJakI4QixFQUFZSixFQUFLLFlBQ3RCa0YsRUN4Q1IsU0FBd0JTLEdBQ3BCLElBQUliLEVBQWE5QixJQUNiNEMsRUFBUSxJQUtZLE9BQXBCZCxFQUFXeEcsTUFBc0MsT0FBcEJ3RyxFQUFXeEcsT0FBcUMsSUFBcEJ3RyxFQUFXaEMsUUFDcEU4QyxFQUFRQyxFQUFTRixHQUNqQkMsRUFBUUEsRUFBTVQsVUFBVSxFQUFHUyxFQUFNcEYsT0FBUyxHQUMxQ29GLEVBQVFFLEVBQXVCRixJQUduQyxjQURPQyxFQUFTRixHQUNUQyxFRDJCY0csQ0FBZS9GLEVBQUlPLE9BQU8sSUFDM0MwQyxFQUFjLENBQUUzRSxLQUFNLFlBS3RCNEcsRUFBaUIsR0FFZEEsR0E1RElsRixHRURmLFNBQVM4RixFQUF1QkUsR0F3QjVCLE9BdkJXQSxFQUFLN0MsUUFBUSxzQkFBc0IsU0FBVVMsR0FDcEQsSUFBSXRDLEVBQU0sR0FHVixJQUNJQSxFQUFNLEVBQVdzQyxHQUVyQixNQUFPcUMsR0FDSDFDLFFBQVFDLElBQUl5QyxHQUVoQixhQUd5QixJQUFWLElBQ1AzRSxFQUFNLElBQ1ZBLEVBQU1BLEVBQUlQLFdBS2QsT1BuQ3dCNkIsSU9pQ3BCdEIsRUFBTSxJQUVIQSxLRDlCZixJQUFJdUUsRUFBVyxHRVFmLE1BYWFLLEVBQVdDLEdBR3hCLFNBQTBCSCxHQUN0QixJQUFJSSxFRmpCUixTQUEyQkosR0FDdkJILEVBQVcsR0FDWCxJQUFJUSxFQUFhLEVBTWpCLE9BTFdMLEVBQUs3QyxRQUFRLGlCQUFpQixTQUFVbUQsR0FDL0MsSUFBSUMsSUFBT0YsRUFFWCxPQURBUixFQUFTVSxHQUFNRCxFQUNSLGNBQWdCQyxFQUFLLFFFV3JCQyxDQUFrQlIsR0FHN0IsT0FGQUksRUFBT04sRUFBdUJNLEdBQzlCQSxFWmRKLFNBQXdCRCxHQU9wQixJQUpBQSxFQUFNQSxFQUFJaEQsUUFBUSxrQkFBbUIsSUFBSTlCLE9BSVYsT0FBeEI4RSxFQUFJQSxFQUFJM0YsT0FBUyxJQUNwQjJGLEVBQU1BLEVBQUk1RixPQUFPLEVBQUc0RixFQUFJM0YsT0FBUyxHQUdyQyxPQUFPMkYsRVlHQU0sQ0FBZUwsR0FDZkEsRUFOQU0sQ0FBaUJQLEdBUzVCVixPQUFPa0IsSUFBTSxDQUNUQyxXQUFZLElBeEJBLFFBeUJaVixVQUNBVyxNTGhDaUIsQ0FBQ3hCLEVBQVF5QixJQUFPcEMsRUFBSVcsR0FBVXlCLEVLaUMvQ0MsVUwvQnFCLElBQU10SSxPQUFPNEUsS0FBS3FCLEdLZ0N2Q3NDLFdYbkJzQixJQUFPdkksT0FBT21DLE9BQU8sR0FBSUgsR1dvQi9DQyxhQUNBdUcsVVh0QnFCLElBQU14RyxFQUFlLEdXdUIxQ29CLGFBQ0FDIiwiZmlsZSI6InJlYWN0by5qcyIsInNvdXJjZXNDb250ZW50IjpbIiBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbiBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG5cbiBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cbiBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7XG4gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG4gXHRcdH1cbiBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbiBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuIFx0XHRcdGk6IG1vZHVsZUlkLFxuIFx0XHRcdGw6IGZhbHNlLFxuIFx0XHRcdGV4cG9ydHM6IHt9XG4gXHRcdH07XG5cbiBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG4gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbiBcdFx0bW9kdWxlLmwgPSB0cnVlO1xuXG4gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbiBcdH1cblxuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbiBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG5cbiBcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7XG4gXHRcdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywgbmFtZSkpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGdldHRlciB9KTtcbiBcdFx0fVxuIFx0fTtcblxuIFx0Ly8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yID0gZnVuY3Rpb24oZXhwb3J0cykge1xuIFx0XHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcbiBcdFx0fVxuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuIFx0fTtcblxuIFx0Ly8gY3JlYXRlIGEgZmFrZSBuYW1lc3BhY2Ugb2JqZWN0XG4gXHQvLyBtb2RlICYgMTogdmFsdWUgaXMgYSBtb2R1bGUgaWQsIHJlcXVpcmUgaXRcbiBcdC8vIG1vZGUgJiAyOiBtZXJnZSBhbGwgcHJvcGVydGllcyBvZiB2YWx1ZSBpbnRvIHRoZSBuc1xuIFx0Ly8gbW9kZSAmIDQ6IHJldHVybiB2YWx1ZSB3aGVuIGFscmVhZHkgbnMgb2JqZWN0XG4gXHQvLyBtb2RlICYgOHwxOiBiZWhhdmUgbGlrZSByZXF1aXJlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnQgPSBmdW5jdGlvbih2YWx1ZSwgbW9kZSkge1xuIFx0XHRpZihtb2RlICYgMSkgdmFsdWUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKHZhbHVlKTtcbiBcdFx0aWYobW9kZSAmIDgpIHJldHVybiB2YWx1ZTtcbiBcdFx0aWYoKG1vZGUgJiA0KSAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIHZhbHVlICYmIHZhbHVlLl9fZXNNb2R1bGUpIHJldHVybiB2YWx1ZTtcbiBcdFx0dmFyIG5zID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yKG5zKTtcbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG5zLCAnZGVmYXVsdCcsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHZhbHVlIH0pO1xuIFx0XHRpZihtb2RlICYgMiAmJiB0eXBlb2YgdmFsdWUgIT0gJ3N0cmluZycpIGZvcih2YXIga2V5IGluIHZhbHVlKSBfX3dlYnBhY2tfcmVxdWlyZV9fLmQobnMsIGtleSwgZnVuY3Rpb24oa2V5KSB7IHJldHVybiB2YWx1ZVtrZXldOyB9LmJpbmQobnVsbCwga2V5KSk7XG4gXHRcdHJldHVybiBucztcbiBcdH07XG5cbiBcdC8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHtcbiBcdFx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0RGVmYXVsdCgpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcbiBcdFx0XHRmdW5jdGlvbiBnZXRNb2R1bGVFeHBvcnRzKCkgeyByZXR1cm4gbW9kdWxlOyB9O1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7XG4gXHRcdHJldHVybiBnZXR0ZXI7XG4gXHR9O1xuXG4gXHQvLyBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGxcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTtcblxuIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbiBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7XG5cblxuIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSAwKTtcbiIsImltcG9ydCB7IF9pbnRlcnByZXQgfSBmcm9tICcuLi9pbnRlcnByZXRlcnMnO1xyXG5leHBvcnQgeyBfcHJlcFZhbEZvck1hdGhzLCBfZWF0VW53YW50ZWROTCwgX3N0YXJ0c1dpdGggfTtcclxuLyoqXHJcbiAqIEl0IHdpbGwgY2hlY2sgaWYgZ2l2ZW4gdG9rZW4gaXMgYSBSZWFjdG8sIGlmIHllc1xyXG4gKiB0aGVuIGNvbnZlcnQgaXQgdG8gYSBudW1iZXIgZm9yIG1hdGhzXHJcbiAqL1xyXG5mdW5jdGlvbiBfcHJlcFZhbEZvck1hdGhzKHRvaykge1xyXG4gICAgbGV0IHYgPSBfaW50ZXJwcmV0KHRvaywgdHJ1ZSk7XHJcbiAgICAvLyBAdHMtaWdub3JlXHJcbiAgICBpZiAoIWlzTmFOKHYpKSB7XHJcbiAgICAgICAgcmV0dXJuIE51bWJlcih2KTtcclxuICAgIH1cclxuICAgIC8vIEB0cy1pZ25vcmVcclxuICAgIHJldHVybiB2O1xyXG59XHJcbi8qXHJcbiogSWYgYSBsaW5lIGVuZHMgd2l0aCBcXFxyXG4qIGkuZS4gYSBcIlxcXCIgaW1tZWRpYXRlbHkgZm9sbG93ZWQgYnkgXCJcXG5cIiAoZW50ZXIpXHJcbiogVGhlbiBlYXQgdGhhdCBuZXdsaW5lIHVwLi4uXHJcbiovXHJcbmZ1bmN0aW9uIF9lYXRVbndhbnRlZE5MKHR4dCkge1xyXG4gICAgLy9jb25zb2xlLmxvZyhcImJlZm9yZT1cIik7IGNvbnNvbGUubG9nKHR4dCk7XHJcbiAgICAvLyB0eHQgPSB0eHQucmVwbGFjZSgvKFxccyt8KVxcXFwoXFxyXFxufFxccnxcXG4pL2csICcgJykudHJpbSgpOyAgLy8gZWF0IHNwYWNlcyBhbHNvXHJcbiAgICB0eHQgPSB0eHQucmVwbGFjZSgvXFxcXChcXHJcXG58XFxyfFxcbikvZywgJycpLnRyaW0oKTtcclxuICAgIC8vc29tZXRpbWVzIGR1ZSB0byBleGNlc3NpdmUgdHJpbW1pbmcgYXQgZWFjaCBwaGFzZSwgXHJcbiAgICAvLyB0aGUgbGFzdCBcIlxcXCIgY2FuIGJlIGxlZnQgYWxvbmUgd2l0aG91dCBhIFwiXFxuXCIgdG8gaGF2ZSBpdCByZW1vdmVkXHJcbiAgICAvLyBoZW5jZSByZW1vdmUgYW55IHRyYWlsaW5nIGxlZnQtYWxvbmUgXCJcXFwiXHJcbiAgICB3aGlsZSAodHh0W3R4dC5sZW5ndGggLSAxXSA9PT0gXCJcXFxcXCIpIHtcclxuICAgICAgICB0eHQgPSB0eHQuc3Vic3RyKDAsIHR4dC5sZW5ndGggLSAxKTtcclxuICAgIH1cclxuICAgIC8vY29uc29sZS5sb2coXCJhZnRlcj1cIik7IGNvbnNvbGUubG9nKHR4dCk7XHJcbiAgICByZXR1cm4gdHh0O1xyXG59XHJcbmZ1bmN0aW9uIF9zdGFydHNXaXRoKHN0ciwgcGFydCkge1xyXG4gICAgaWYgKCFzdHIgfHwgIXBhcnQpXHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgcmV0dXJuIHN0ci5zdWJzdHIoMCwgcGFydC5sZW5ndGgpID09PSBwYXJ0O1xyXG59XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXV0aWwuanMubWFwIiwiLyoqXHJcbiAqIFVzZXJzIGNhbiBzZXQgYW5kIGdldCB2YXJpYWJsZXNcclxuICogU3RydWN0dXJlczpcclxuICogKHIudmFyLmsxKSAgIC8vIHRvIGdldCBhIHZhbHVlXHJcbiAqIChyLnZhci5rMT12MSkgICAgLy8gdG8gc2V0IGEgdmFsdWVcclxuICogKHIudmFyLmsxPXIuZHQuZGF0ZSkgICAgLy8gdG8gc2V0IGEgdmFsdWUgZnJvbSBhIHJlYWN0byBpdHNlbGZcclxuICpcclxuICogU2luY2UgXCJfaW50ZXJwcmV0XCIgaGFzIGFscmVhZHkgc3RyaXBwZWQgXCJ2YXIuXCIsIGhlcmUgd2Ugd2lsbCBnZXQgZWl0aGVyIG9mXHJcbiAqIGtleSAgICAgICAgICAoZm9yIGEgZ2V0KVxyXG4gKiBrZXk9dmFsdWUgICAgKGZvciBhIHNldClcclxuICogQHBhcmFtIHtTdHJpbmd9IHRva2VuXHJcbiAqL1xyXG5pbXBvcnQgeyBfc3RhcnRzV2l0aCB9IGZyb20gJy4uL3NlcnZpY2VzL3V0aWwnO1xyXG5pbXBvcnQgeyBfaW50ZXJwcmV0IH0gZnJvbSAnLi9pbmRleCc7XHJcbi8qXHJcbiBUbyBzdG9yZSBhbGwgdXNlciBkZWZpbmVkIHJlYWN0by12YXJpYWJsZVxyXG4gZGVjbGFyZWQgdXNpbmcgKChyLnZhci52YXJOYW1lID0gdmFyVmFsdWUpKVxyXG4qL1xyXG5sZXQgX3ByaXZhdGVWYXJzID0ge307XHJcbmV4cG9ydCBjb25zdCBfc2V0VmFyID0gKGssIHYpID0+IF9wcml2YXRlVmFyc1trXSA9IHY7XHJcbmV4cG9ydCBjb25zdCBzZXRBbGxWYXJzID0gKGt2UGFpcnMpID0+IF9wcml2YXRlVmFycyA9IE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgX3ByaXZhdGVWYXJzKSwga3ZQYWlycyk7XHJcbi8vIEZhaWwgc2lsZW50bHksIGJ1dCBlbnN1cmUgMCBpcyBOT1QgRkFMU0UgYnkgY2hhbmdpbmcgaXQgdG8gU3RyaW5nXHJcbmV4cG9ydCBjb25zdCBfZ2V0VmFyID0gKGspID0+ICh0eXBlb2YgKF9wcml2YXRlVmFyc1trXSkgIT09ICd1bmRlZmluZWQnKSA/IF9wcml2YXRlVmFyc1trXS50b1N0cmluZygpIDogJyc7XHJcbmV4cG9ydCBjb25zdCByZXNldFZhcnMgPSAoKSA9PiBfcHJpdmF0ZVZhcnMgPSB7fTtcclxuZXhwb3J0IGNvbnN0IGdldEFsbFZhcnMgPSAoKSA9PiAoT2JqZWN0LmFzc2lnbih7fSwgX3ByaXZhdGVWYXJzKSk7XHJcbi8qKlxyXG4gKiBJbnRlcnByZXQgYm90aCBnZXQgYW5kIHNldCBjYWxsLlxyXG4gKiBFeGFtcGxlIG9mIGdldCBjYWxsLCAoKHIudmFyLnZhck5hbWUpKVxyXG4gKiBFeGFtcGxlIG9mIHNldCBjYWxsLCAoKHIudmFyLnZhck5hbWUgPSBzb21lIHRleHQgdmFsdWUgb2YgYW55IGxlbmd0aCBhbmQgbWF5IGNvbnRhaW4gbmV3IGxpbmUpKVxyXG4gKiBAcGFyYW0gdG9rZW4gfCByXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgX2ludGVycHJldF92YXIgPSAodG9rZW4pID0+IHtcclxuICAgIC8vIGlmIGEgU0VUIGNhbGxcclxuICAgIGlmICh0b2tlbi5pbmRleE9mKFwiPVwiKSA+IC0xKSB7XHJcbiAgICAgICAgdmFyIHBhcnRzID0gdG9rZW4uc3BsaXQoXCI9XCIpO1xyXG4gICAgICAgIHZhciBrZXkgPSBwYXJ0c1swXS50cmltKCk7XHJcbiAgICAgICAgdmFyIHZhbCA9IHBhcnRzWzFdLnRyaW0oKTtcclxuICAgICAgICAvLyBOT1RFOiBjaGVjayBpZiB0aGUgdmFsdWUgaXMgYSByZWFjdG8gaXRzZWxmIDpQXHJcbiAgICAgICAgLy8gKChyLnZhci50aGlzWWVhciA9IHIuZHQueWVhcikpXHJcbiAgICAgICAgdmFsID0gX3N0YXJ0c1dpdGgodmFsLCBcInIuXCIpID8gX2ludGVycHJldCh2YWwsIHRydWUpIDogdmFsO1xyXG4gICAgICAgIF9zZXRWYXIoa2V5LCB2YWwpO1xyXG4gICAgICAgIHJldHVybiAnJztcclxuICAgIH1cclxuICAgIC8vIEVsc2UgYSBHRVQgY2FsbFxyXG4gICAgLy8gQ2F1dGlvbiwgaWYgdGhlIHZhbHVlIHdhcyBwcmV2aW91c2x5IHNldCBieSByZWFjdG8sIHRoZW4gaXQgbWF5IG5lZWQgdG8gcHJvY2VzcyBieSBMYW5nVHJhbnNsYXRlXHJcbiAgICBlbHNlIHtcclxuICAgICAgICBsZXQgdmFsdWUgPSBfZ2V0VmFyKHRva2VuLnRvU3RyaW5nKCkudHJpbSgpKTtcclxuICAgICAgICAvLyBMZXQncyBnaXZlIDEgbGV2ZWwgb2YgaW50ZXJwb2xhdGlvbiBmZWF0dXJlXHJcbiAgICAgICAgLy8gdGhhdCBpcyxcclxuICAgICAgICAvLyBpZiBhbm90aGVyIHIudmFyLnZhcl9uYW1lIGlzIGVtYmVkZGVkIGluIHRoaXMgb25lLFxyXG4gICAgICAgIC8vIHRoZW4gcmVwbGFjZSBpdCB3aXRoIHRoZSByZWFsIHZhbHVlIFxyXG4gICAgICAgIGNvbnN0IFJfVkFSID0gJ3IudmFyLic7XHJcbiAgICAgICAgdmFsdWUgPSB2YWx1ZS5zcGxpdCgnICcpLm1hcCh2ID0+IHtcclxuICAgICAgICAgICAgaWYgKF9zdGFydHNXaXRoKHYsIFJfVkFSKSkge1xyXG4gICAgICAgICAgICAgICAgbGV0IHJlYWxWYWx1ZSA9IF9nZXRWYXIodi5zdWJzdHIoUl9WQVIubGVuZ3RoKSk7XHJcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIChyZWFsVmFsdWUpICE9PSAndW5kZWZpbmVkJylcclxuICAgICAgICAgICAgICAgICAgICB2ID0gcmVhbFZhbHVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiB2O1xyXG4gICAgICAgIH0pLmpvaW4oJyAnKTtcclxuICAgICAgICByZXR1cm4gdmFsdWU7XHJcbiAgICB9XHJcbn07XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXZhci5qcy5tYXAiLCIvKipcclxuICogRXh0cmFjdGVkIHRoZSBsb2NhbGVzIGZyb20gaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvTGlzdF9vZl9JU09fNjM5LTFfY29kZXNcclxuICogQWRkZWQgYSBjbGFzcyAnbHRibCcgaW4gdGFibGUsIGFuZCB0aGVuIHJhbiB0aGUgZm9sbG93aW5nIHNjcmlwdFxyXG4gKlxyXG4gICAgdmFyIGEgPSB7fVxyXG4gICAgJCgnLmx0YmwgdHInKS5lYWNoKGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIGFbJCh0aGlzKS5maW5kKCd0ZDpudGgtY2hpbGQoNSknKS50ZXh0KCldID0gJCh0aGlzKS5maW5kKCd0ZDpudGgtY2hpbGQoNCknKS50ZXh0KClcclxuICAgIH0pXHJcbiAgICBjb3B5KGEpXHJcbiAgICBcclxuICovXHJcbmNvbnN0IExPQ0FMRVMgPSB7XHJcbiAgICBcImFiXCI6IFwi0LDSp9GB0YPQsCDQsdGL0LfRiNOZ0LAsINCw0qfRgdGI05nQsFwiLFxyXG4gICAgXCJhYVwiOiBcIkFmYXJhZlwiLFxyXG4gICAgXCJhZlwiOiBcIkFmcmlrYWFuc1wiLFxyXG4gICAgXCJha1wiOiBcIkFrYW5cIixcclxuICAgIFwic3FcIjogXCJTaHFpcFwiLFxyXG4gICAgXCJhbVwiOiBcIuGKoOGIm+GIreGKm1wiLFxyXG4gICAgXCJhclwiOiBcItin2YTYudix2KjZitipXCIsXHJcbiAgICBcImFuXCI6IFwiYXJhZ29uw6lzXCIsXHJcbiAgICBcImh5XCI6IFwi1YDVodW11aXWgNWl1bZcIixcclxuICAgIFwiYXNcIjogXCLgpoXgprjgpq7gp4Dgpq/gprzgpr5cIixcclxuICAgIFwiYXZcIjogXCLQsNCy0LDRgCDQvNCw0YbTgCwg0LzQsNCz04DQsNGA0YPQuyDQvNCw0YbTgFwiLFxyXG4gICAgXCJhZVwiOiBcImF2ZXN0YVwiLFxyXG4gICAgXCJheVwiOiBcImF5bWFyIGFydVwiLFxyXG4gICAgXCJhelwiOiBcImF6yZlyYmF5Y2FuIGRpbGksINiq24bYsdqp2KzZh1wiLFxyXG4gICAgXCJibVwiOiBcImJhbWFuYW5rYW5cIixcclxuICAgIFwiYmFcIjogXCLQsdCw0YjSodC+0YDRgiDRgtC10LvQtVwiLFxyXG4gICAgXCJldVwiOiBcImV1c2thcmEsIGV1c2tlcmFcIixcclxuICAgIFwiYmVcIjogXCLQsdC10LvQsNGA0YPRgdC60LDRjyDQvNC+0LLQsFwiLFxyXG4gICAgXCJiblwiOiBcIuCmrOCmvuCmguCmsuCmvlwiLFxyXG4gICAgXCJiaFwiOiBcIuCkreCli+CknOCkquClgeCksOClgFwiLFxyXG4gICAgXCJiaVwiOiBcIkJpc2xhbWFcIixcclxuICAgIFwiYnNcIjogXCJib3NhbnNraSBqZXppa1wiLFxyXG4gICAgXCJiclwiOiBcImJyZXpob25lZ1wiLFxyXG4gICAgXCJiZ1wiOiBcItCx0YrQu9Cz0LDRgNGB0LrQuCDQtdC30LjQulwiLFxyXG4gICAgXCJteVwiOiBcIuGAl+GAmeGArOGAheGArFwiLFxyXG4gICAgXCJjYVwiOiBcImNhdGFsw6AsIHZhbGVuY2nDoFwiLFxyXG4gICAgXCJjaFwiOiBcIkNoYW1vcnVcIixcclxuICAgIFwiY2VcIjogXCLQvdC+0YXRh9C40LnQvSDQvNC+0YLRglwiLFxyXG4gICAgXCJueVwiOiBcImNoaUNoZcW1YSwgY2hpbnlhbmphXCIsXHJcbiAgICBcInpoXCI6IFwi5Lit5paHIChaaMWNbmd3w6luKSwg5rGJ6K+tLCDmvKLoqp5cIixcclxuICAgIFwiY3ZcIjogXCLRh9OR0LLQsNGIINGH05fQu9GF0LhcIixcclxuICAgIFwia3dcIjogXCJLZXJuZXdla1wiLFxyXG4gICAgXCJjb1wiOiBcImNvcnN1LCBsaW5ndWEgY29yc2FcIixcclxuICAgIFwiY3JcIjogXCLhk4DhkKbhkIPhlK3hkI3hkI/hkKNcIixcclxuICAgIFwiaHJcIjogXCJocnZhdHNraSBqZXppa1wiLFxyXG4gICAgXCJjc1wiOiBcIsSNZcWhdGluYSwgxI1lc2vDvSBqYXp5a1wiLFxyXG4gICAgXCJkYVwiOiBcImRhbnNrXCIsXHJcbiAgICBcImR2XCI6IFwi3oveqN6I3qzegN6oXCIsXHJcbiAgICBcIm5sXCI6IFwiTmVkZXJsYW5kcywgVmxhYW1zXCIsXHJcbiAgICBcImR6XCI6IFwi4L2i4L6r4L284L2E4LyL4L2BXCIsXHJcbiAgICBcImVuXCI6IFwiRW5nbGlzaFwiLFxyXG4gICAgXCJlb1wiOiBcIkVzcGVyYW50b1wiLFxyXG4gICAgXCJldFwiOiBcImVlc3RpLCBlZXN0aSBrZWVsXCIsXHJcbiAgICBcImVlXCI6IFwiRcqLZWdiZVwiLFxyXG4gICAgXCJmb1wiOiBcImbDuHJveXNrdFwiLFxyXG4gICAgXCJmalwiOiBcInZvc2EgVmFrYXZpdGlcIixcclxuICAgIFwiZmlcIjogXCJzdW9taSwgc3VvbWVuIGtpZWxpXCIsXHJcbiAgICBcImZyXCI6IFwiZnJhbsOnYWlzLCBsYW5ndWUgZnJhbsOnYWlzZVwiLFxyXG4gICAgXCJmZlwiOiBcIkZ1bGZ1bGRlLCBQdWxhYXIsIFB1bGFyXCIsXHJcbiAgICBcImdsXCI6IFwiR2FsZWdvXCIsXHJcbiAgICBcImthXCI6IFwi4YOl4YOQ4YOg4YOX4YOj4YOa4YOYXCIsXHJcbiAgICBcImRlXCI6IFwiRGV1dHNjaFwiLFxyXG4gICAgXCJlbFwiOiBcIs61zrvOu863zr3Ouc66zqxcIixcclxuICAgIFwiZ25cIjogXCJBdmHDsWUn4bq9XCIsXHJcbiAgICBcImd1XCI6IFwi4KqX4KuB4Kqc4Kqw4Kq+4Kqk4KuAXCIsXHJcbiAgICBcImh0XCI6IFwiS3JlecOybCBheWlzeWVuXCIsXHJcbiAgICBcImhhXCI6IFwiKEhhdXNhKSDZh9mO2YjZj9iz2Y5cIixcclxuICAgIFwiaGVcIjogXCLXoteR16jXmdeqXCIsXHJcbiAgICBcImh6XCI6IFwiT3RqaWhlcmVyb1wiLFxyXG4gICAgXCJoaVwiOiBcIuCkueCkv+CkqOCljeCkpuClgCwg4KS54KS/4KSC4KSm4KWAXCIsXHJcbiAgICBcImhvXCI6IFwiSGlyaSBNb3R1XCIsXHJcbiAgICBcImh1XCI6IFwibWFneWFyXCIsXHJcbiAgICBcImlhXCI6IFwiSW50ZXJsaW5ndWFcIixcclxuICAgIFwiaWRcIjogXCJCYWhhc2EgSW5kb25lc2lhXCIsXHJcbiAgICBcImllXCI6IFwiKG9yaWdpbmFsbHk6KSBPY2NpZGVudGFsLCAoYWZ0ZXIgV1dJSTopIEludGVybGluZ3VlXCIsXHJcbiAgICBcImdhXCI6IFwiR2FlaWxnZVwiLFxyXG4gICAgXCJpZ1wiOiBcIkFz4bulc+G7pSBJZ2JvXCIsXHJcbiAgICBcImlrXCI6IFwiScOxdXBpYXEsIEnDsXVwaWF0dW5cIixcclxuICAgIFwiaW9cIjogXCJJZG9cIixcclxuICAgIFwiaXNcIjogXCLDjXNsZW5za2FcIixcclxuICAgIFwiaXRcIjogXCJJdGFsaWFub1wiLFxyXG4gICAgXCJpdVwiOiBcIuGQg+GThOGSg+GRjuGRkOGRplwiLFxyXG4gICAgXCJqYVwiOiBcIuaXpeacrOiqniAo44Gr44G744KT44GUKVwiLFxyXG4gICAgXCJqdlwiOiBcIuqmp+qmseqml+qmriwgQmFzYSBKYXdhXCIsXHJcbiAgICBcImtsXCI6IFwia2FsYWFsbGlzdXQsIGthbGFhbGxpdCBvcWFhc2lpXCIsXHJcbiAgICBcImtuXCI6IFwi4LKV4LKo4LON4LKo4LKhXCIsXHJcbiAgICBcImtyXCI6IFwiS2FudXJpXCIsXHJcbiAgICBcImtzXCI6IFwi4KSV4KS24KWN4KSu4KWA4KSw4KWALCDZg9i02YXZitix2YrigI5cIixcclxuICAgIFwia2tcIjogXCLSm9Cw0LfQsNKbINGC0ZbQu9GWXCIsXHJcbiAgICBcImttXCI6IFwi4Z6B4Z+S4Z6Y4Z+C4Z6aLCDhnoHhn4Hhnpjhnprhnpfhnrbhnp/hnrYsIOGel+GetuGen+GetuGegeGfkuGemOGfguGemlwiLFxyXG4gICAgXCJraVwiOiBcIkfEqWvFqXnFqVwiLFxyXG4gICAgXCJyd1wiOiBcIklraW55YXJ3YW5kYVwiLFxyXG4gICAgXCJreVwiOiBcItCa0YvRgNCz0YvQt9GH0LAsINCa0YvRgNCz0YvQtyDRgtC40LvQuFwiLFxyXG4gICAgXCJrdlwiOiBcItC60L7QvNC4INC60YvQslwiLFxyXG4gICAgXCJrZ1wiOiBcIktpa29uZ29cIixcclxuICAgIFwia29cIjogXCLtlZzqta3slrRcIixcclxuICAgIFwia3VcIjogXCJLdXJkw64sINqp2YjYsdiv24zigI5cIixcclxuICAgIFwia2pcIjogXCJLdWFueWFtYVwiLFxyXG4gICAgXCJsYVwiOiBcImxhdGluZSwgbGluZ3VhIGxhdGluYVwiLFxyXG4gICAgXCJsYlwiOiBcIkzDq3R6ZWJ1ZXJnZXNjaFwiLFxyXG4gICAgXCJsZ1wiOiBcIkx1Z2FuZGFcIixcclxuICAgIFwibGlcIjogXCJMaW1idXJnc1wiLFxyXG4gICAgXCJsblwiOiBcIkxpbmfDoWxhXCIsXHJcbiAgICBcImxvXCI6IFwi4Lqe4Lqy4Lqq4Lqy4Lql4Lqy4LqnXCIsXHJcbiAgICBcImx0XCI6IFwibGlldHV2acWzIGthbGJhXCIsXHJcbiAgICBcImx1XCI6IFwiS2lsdWJhXCIsXHJcbiAgICBcImx2XCI6IFwibGF0dmllxaF1IHZhbG9kYVwiLFxyXG4gICAgXCJndlwiOiBcIkdhZWxnLCBHYWlsY2tcIixcclxuICAgIFwibWtcIjogXCLQvNCw0LrQtdC00L7QvdGB0LrQuCDRmNCw0LfQuNC6XCIsXHJcbiAgICBcIm1nXCI6IFwiZml0ZW55IG1hbGFnYXN5XCIsXHJcbiAgICBcIm1zXCI6IFwiQmFoYXNhIE1lbGF5dSwg2KjZh9in2LMg2YXZhNin2YrZiOKAjlwiLFxyXG4gICAgXCJtbFwiOiBcIuC0ruC0suC0r+C0vuC0s+C0glwiLFxyXG4gICAgXCJtdFwiOiBcIk1hbHRpXCIsXHJcbiAgICBcIm1pXCI6IFwidGUgcmVvIE3EgW9yaVwiLFxyXG4gICAgXCJtclwiOiBcIuCkruCksOCkvuCkoOClgFwiLFxyXG4gICAgXCJtaFwiOiBcIkthamluIE3Mp2FqZcS8XCIsXHJcbiAgICBcIm1uXCI6IFwi0JzQvtC90LPQvtC7INGF0Y3Qu1wiLFxyXG4gICAgXCJuYVwiOiBcIkRvcmVyaW4gTmFvZXJvXCIsXHJcbiAgICBcIm52XCI6IFwiRGluw6kgYml6YWFkXCIsXHJcbiAgICBcIm5kXCI6IFwiaXNpTmRlYmVsZVwiLFxyXG4gICAgXCJuZVwiOiBcIuCkqOClh+CkquCkvuCksuClgFwiLFxyXG4gICAgXCJuZ1wiOiBcIk93YW1ib1wiLFxyXG4gICAgXCJuYlwiOiBcIk5vcnNrIEJva23DpWxcIixcclxuICAgIFwibm5cIjogXCJOb3JzayBOeW5vcnNrXCIsXHJcbiAgICBcIm5vXCI6IFwiTm9yc2tcIixcclxuICAgIFwiaWlcIjogXCLqhojqjKDqkr8gTnVvc3VoeG9wXCIsXHJcbiAgICBcIm5yXCI6IFwiaXNpTmRlYmVsZVwiLFxyXG4gICAgXCJvY1wiOiBcIm9jY2l0YW4sIGxlbmdhIGQnw7JjXCIsXHJcbiAgICBcIm9qXCI6IFwi4ZCK4ZOC4ZSR4ZOI4ZCv4ZKn4ZCO4ZOQXCIsXHJcbiAgICBcImN1XCI6IFwi0anQt9GL0LrRiiDRgdC70L7QstGj0L3RjNGB0LrRilwiLFxyXG4gICAgXCJvbVwiOiBcIkFmYWFuIE9yb21vb1wiLFxyXG4gICAgXCJvclwiOiBcIuCsk+CsoeCsvOCsv+CshlwiLFxyXG4gICAgXCJvc1wiOiBcItC40YDQvtC9IMOm0LLQt9Cw0LNcIixcclxuICAgIFwicGFcIjogXCLgqKrgqbDgqJzgqL7gqKzgqYAsINm+2YbYrNin2KjbjOKAjlwiLFxyXG4gICAgXCJwaVwiOiBcIuCkquCkvuCksuCkvywg4KSq4KS+4KSz4KS/XCIsXHJcbiAgICBcImZhXCI6IFwi2YHYp9ix2LPbjFwiLFxyXG4gICAgXCJwbFwiOiBcImrEmXp5ayBwb2xza2ksIHBvbHN6Y3p5em5hXCIsXHJcbiAgICBcInBzXCI6IFwi2b7amtiq2YhcIixcclxuICAgIFwicHRcIjogXCJQb3J0dWd1w6pzXCIsXHJcbiAgICBcInF1XCI6IFwiUnVuYSBTaW1pLCBLaWNod2FcIixcclxuICAgIFwicm1cIjogXCJSdW1hbnRzY2ggR3Jpc2NodW5cIixcclxuICAgIFwicm5cIjogXCJJa2lydW5kaVwiLFxyXG4gICAgXCJyb1wiOiBcIlJvbcOibsSDXCIsXHJcbiAgICBcInJ1XCI6IFwi0YDRg9GB0YHQutC40LlcIixcclxuICAgIFwic2FcIjogXCLgpLjgpILgpLjgpY3gpJXgpYPgpKTgpK7gpY1cIixcclxuICAgIFwic2NcIjogXCJzYXJkdVwiLFxyXG4gICAgXCJzZFwiOiBcIuCkuOCkv+CkqOCljeCkp+ClgCwg2LPZhtqM2YrYjCDYs9mG2K/avtuM4oCOXCIsXHJcbiAgICBcInNlXCI6IFwiRGF2dmlzw6FtZWdpZWxsYVwiLFxyXG4gICAgXCJzbVwiOiBcImdhZ2FuYSBmYSdhIFNhbW9hXCIsXHJcbiAgICBcInNnXCI6IFwiecOibmfDoiB0w64gc8OkbmfDtlwiLFxyXG4gICAgXCJzclwiOiBcItGB0YDQv9GB0LrQuCDRmNC10LfQuNC6XCIsXHJcbiAgICBcImdkXCI6IFwiR8OgaWRobGlnXCIsXHJcbiAgICBcInNuXCI6IFwiY2hpU2hvbmFcIixcclxuICAgIFwic2lcIjogXCLgt4Pgt5LgtoLgt4Tgtr1cIixcclxuICAgIFwic2tcIjogXCJTbG92ZW7EjWluYSwgU2xvdmVuc2vDvSBqYXp5a1wiLFxyXG4gICAgXCJzbFwiOiBcIlNsb3ZlbnNraSBqZXppaywgU2xvdmVuxaHEjWluYVwiLFxyXG4gICAgXCJzb1wiOiBcIlNvb21hYWxpZ2EsIGFmIFNvb21hYWxpXCIsXHJcbiAgICBcInN0XCI6IFwiU2Vzb3Rob1wiLFxyXG4gICAgXCJlc1wiOiBcIkVzcGHDsW9sXCIsXHJcbiAgICBcInN1XCI6IFwiQmFzYSBTdW5kYVwiLFxyXG4gICAgXCJzd1wiOiBcIktpc3dhaGlsaVwiLFxyXG4gICAgXCJzc1wiOiBcIlNpU3dhdGlcIixcclxuICAgIFwic3ZcIjogXCJTdmVuc2thXCIsXHJcbiAgICBcInRhXCI6IFwi4K6k4K6u4K6/4K604K+NXCIsXHJcbiAgICBcInRlXCI6IFwi4LCk4LGG4LCy4LGB4LCX4LGBXCIsXHJcbiAgICBcInRnXCI6IFwi0YLQvtK30LjQutOjLCB0b8OnaWvEqywg2KrYp9is24zaqduM4oCOXCIsXHJcbiAgICBcInRoXCI6IFwi4LmE4LiX4LiiXCIsXHJcbiAgICBcInRpXCI6IFwi4Ym14YyN4Yit4YqbXCIsXHJcbiAgICBcImJvXCI6IFwi4L2W4L284L2R4LyL4L2h4L2y4L2CXCIsXHJcbiAgICBcInRrXCI6IFwiVMO8cmttZW4sINCi0q/RgNC60LzQtdC9XCIsXHJcbiAgICBcInRsXCI6IFwiV2lrYW5nIFRhZ2Fsb2dcIixcclxuICAgIFwidG5cIjogXCJTZXRzd2FuYVwiLFxyXG4gICAgXCJ0b1wiOiBcIkZha2EgVG9uZ2FcIixcclxuICAgIFwidHJcIjogXCJUw7xya8OnZVwiLFxyXG4gICAgXCJ0c1wiOiBcIlhpdHNvbmdhXCIsXHJcbiAgICBcInR0XCI6IFwi0YLQsNGC0LDRgCDRgtC10LvQtSwgdGF0YXIgdGVsZVwiLFxyXG4gICAgXCJ0d1wiOiBcIlR3aVwiLFxyXG4gICAgXCJ0eVwiOiBcIlJlbyBUYWhpdGlcIixcclxuICAgIFwidWdcIjogXCLYptuH2YrYutuH2LHahtuV4oCOLCBVeWdodXJjaGVcIixcclxuICAgIFwidWtcIjogXCLQo9C60YDQsNGX0L3RgdGM0LrQsFwiLFxyXG4gICAgXCJ1clwiOiBcItin2LHYr9mIXCIsXHJcbiAgICBcInV6XCI6IFwiT8q7emJlaywg0I7Qt9Cx0LXQuiwg2KPbh9iy2KjbkNmD4oCOXCIsXHJcbiAgICBcInZlXCI6IFwiVHNoaXZlbuG4k2FcIixcclxuICAgIFwidmlcIjogXCJUaeG6v25nIFZp4buHdFwiLFxyXG4gICAgXCJ2b1wiOiBcIlZvbGFww7xrXCIsXHJcbiAgICBcIndhXCI6IFwiV2Fsb25cIixcclxuICAgIFwiY3lcIjogXCJDeW1yYWVnXCIsXHJcbiAgICBcIndvXCI6IFwiV29sbG9mXCIsXHJcbiAgICBcImZ5XCI6IFwiRnJ5c2tcIixcclxuICAgIFwieGhcIjogXCJpc2lYaG9zYVwiLFxyXG4gICAgXCJ5aVwiOiBcIteZ15nWtNeT15nXqVwiLFxyXG4gICAgXCJ5b1wiOiBcIllvcsO5YsOhXCIsXHJcbiAgICBcInphXCI6IFwiU2HJryBjdWXFi8aFLCBTYXcgY3VlbmdoXCIsXHJcbiAgICBcInp1XCI6IFwiaXNpWnVsdVwiXHJcbn07XHJcbmxldCBjdXJyZW50TG9jYWxlID0gJ2VuJzsgLy8gYWx3YXlzIGZhbGxiYWNrIHRvIEVuZ2xpc2hcclxuZXhwb3J0IGNvbnN0IGdldExvY2FsZXMgPSAoKSA9PiAoT2JqZWN0LmFzc2lnbih7fSwgTE9DQUxFUykpOyAvLyByZXR1cm4gYSBjb3B5LCBubyBhY2NpZGVudGFsIG1vZGlmaWNhdGlvblxyXG4vLyAgZXhwb3J0IGNvbnN0IGdldExhbmdzID0gKCkgPT4gT2JqZWN0LnZhbHVlcyhMT0NBTEVTKVxyXG4vLyAgZXhwb3J0IGNvbnN0IGdldExvY2FsZUNvZGVzID0gKCkgPT4gT2JqZWN0LmtleXMoTE9DQUxFUylcclxuZXhwb3J0IGNvbnN0IGdldEN1cnJlbnRMb2NhbGUgPSAoKSA9PiBjdXJyZW50TG9jYWxlO1xyXG4vKipcclxuICogU2V0IGN1cnJlbnQgbG9jYWxlIGlmIG9ubHkgYSB2YWxpZCBvbmUsIGVsc2Uga2VlcCAnZW4nXHJcbiAqIEBwYXJhbSBsb2NhbGVDb2RlXHJcbiAqL1xyXG5leHBvcnQgY29uc3Qgc2V0Q3VycmVudExvY2FsZSA9IChsb2NhbGVDb2RlKSA9PiB7XHJcbiAgICBpZiAoT2JqZWN0LmtleXMoTE9DQUxFUykuaW5jbHVkZXMobG9jYWxlQ29kZSkpIHtcclxuICAgICAgICBjdXJyZW50TG9jYWxlID0gbG9jYWxlQ29kZTtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKCdUaGUgcGFzc2VkIGxvY2FsZSBjb2RlICcgKyBsb2NhbGVDb2RlICsgJyBpcyBub3QgYSB2YWxpZCBsb2NhbCBjb2Rlcy4nKTtcclxuICAgICAgICBjb25zb2xlLmxvZygnRm9yIHlvdXIgaGVscCwgdGhpcyBhcmUgdmFsaWQgbG9jYWxlcyAtJyk7XHJcbiAgICAgICAgY29uc29sZS5sb2coSlNPTi5zdHJpbmdpZnkoZ2V0TG9jYWxlcygpLCBudWxsLCA0KSk7XHJcbiAgICB9XHJcbn07XHJcbi8qKlxyXG4gKiBDb252ZXJ0IGEgbnVtYmVyIHRvIGEgbG9jYWwgc3RyaW5nIHJlcHJlc2VudGF0aW9uLFxyXG4gKiBlLmcuIGluIEJlbmdhbGkgOTcgPT4gXCLgp6/gp61cIlxyXG4gKiBAcGFyYW0gbnVtIGFueSBudW1iZXJcclxuICogQHJldHVybnNcclxuICovXHJcbmV4cG9ydCBjb25zdCBudW1Ub0xvY2FsZSA9IChudW0pID0+IG5ldyBJbnRsLk51bWJlckZvcm1hdChjdXJyZW50TG9jYWxlKS5mb3JtYXQobnVtKTtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bG9jYWxlLmpzLm1hcCIsImltcG9ydCB7IF9wcmVwVmFsRm9yTWF0aHMgfSBmcm9tICcuLi9zZXJ2aWNlcy91dGlsJztcclxuaW1wb3J0IHsgc2V0QWxsVmFycyB9IGZyb20gJy4vdmFyJztcclxuaW1wb3J0IHsgbnVtVG9Mb2NhbGUgfSBmcm9tICcuLi9zZXJ2aWNlcy9sb2NhbGUnO1xyXG4vKlxyXG4gICAgKiBUaGlzIGZ1bmN0aW9uIHdpbGwgZG8gYmFzaWMgNCBtYXRocyBvcGVhcmlvbiBpLmUuICsgLSAqIC9cclxuICAgICogKChyLmNhbGMuIG4xIE9QIG4yKSlcclxuICAgICogbjEgYW5kIG4yIGNhbiBiZSBhbnkgbnVtYmVyIG9yIHJlYWN0b1xyXG4gICAgKiBPUCBpcyBhbnlvbmUgb2YgKyAtICogL1xyXG4gICAgKiBzaW5jZSBcIigoci5jYWxjLlwiIGFuZCBcIikpXCIgaGFzIGJlZW4gc3RyaXBwZWQgZnJvbSBiZWdpbmluZyBhbmQgZW5kLCBoZXJlIHdlIHdpbGwgb25seSBnZXQgdGhlIGZvbGxvd2luZ1xyXG4gICAgKiBuMSBPUCBuMlxyXG4qL1xyXG5sZXQgYWxsQ2FsY1Jlc3VsdHMgPSBbXTsgLy8gVGhpcyBhcnJheSB3aWxsIGtlZXAgb24gc3RvcmluZyBhbGwgQ2FsYyByZXN1bHRzXHJcbmZ1bmN0aW9uIF9pbnRlcnByZXRfY2FsYyh0b2ssIHNraXBUcmFuc2xhdGlvbikge1xyXG4gICAgbGV0IHJlc3VsdDtcclxuICAgIGlmICh0b2suaW5kZXhPZignKycpID49IDApIHtcclxuICAgICAgICBsZXQgcGFydHMgPSB0b2suc3BsaXQoJysnKTtcclxuICAgICAgICBjb25zdCBvcDEgPSBfcHJlcFZhbEZvck1hdGhzKHBhcnRzWzBdKTtcclxuICAgICAgICBjb25zdCBvcDIgPSBfcHJlcFZhbEZvck1hdGhzKHBhcnRzWzFdKTtcclxuICAgICAgICBpZiAoIWlzTmFOKG9wMSkgJiYgIWlzTmFOKG9wMikpIHtcclxuICAgICAgICAgICAgcmVzdWx0ID0gb3AxICsgb3AyO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGVsc2UgaWYgKHRvay5pbmRleE9mKCctJykgPj0gMCkge1xyXG4gICAgICAgIGxldCBwYXJ0cyA9IHRvay5zcGxpdCgnLScpO1xyXG4gICAgICAgIGNvbnN0IG9wMSA9IF9wcmVwVmFsRm9yTWF0aHMocGFydHNbMF0pO1xyXG4gICAgICAgIGNvbnN0IG9wMiA9IF9wcmVwVmFsRm9yTWF0aHMocGFydHNbMV0pO1xyXG4gICAgICAgIGlmICghaXNOYU4ob3AxKSAmJiAhaXNOYU4ob3AyKSkge1xyXG4gICAgICAgICAgICByZXN1bHQgPSBvcDEgLSBvcDI7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgZWxzZSBpZiAodG9rLmluZGV4T2YoJyonKSA+PSAwKSB7XHJcbiAgICAgICAgbGV0IHBhcnRzID0gdG9rLnNwbGl0KCcqJyk7XHJcbiAgICAgICAgY29uc3Qgb3AxID0gX3ByZXBWYWxGb3JNYXRocyhwYXJ0c1swXSk7XHJcbiAgICAgICAgY29uc3Qgb3AyID0gX3ByZXBWYWxGb3JNYXRocyhwYXJ0c1sxXSk7XHJcbiAgICAgICAgaWYgKCFpc05hTihvcDEpICYmICFpc05hTihvcDIpKSB7XHJcbiAgICAgICAgICAgIHJlc3VsdCA9IG9wMSAqIG9wMjtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmICh0b2suaW5kZXhPZignLycpID49IDApIHtcclxuICAgICAgICBsZXQgcGFydHMgPSB0b2suc3BsaXQoJy8nKTtcclxuICAgICAgICBjb25zdCBvcDEgPSBfcHJlcFZhbEZvck1hdGhzKHBhcnRzWzBdKTtcclxuICAgICAgICBjb25zdCBvcDIgPSBfcHJlcFZhbEZvck1hdGhzKHBhcnRzWzFdKTtcclxuICAgICAgICBpZiAoIWlzTmFOKG9wMSkgJiYgIWlzTmFOKG9wMikpIHtcclxuICAgICAgICAgICAgcmVzdWx0ID0gb3AxIC8gb3AyO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIC8vIFN0b3JlIGl0IHJlc3VsdHMgYXJyYXlcclxuICAgIGlmICh0eXBlb2YgKHJlc3VsdCkgIT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICAgICAgYWxsQ2FsY1Jlc3VsdHMucHVzaChyZXN1bHQpO1xyXG4gICAgICAgIF9jcmVhdGVTcGVjaWFsQ2FsY1ZhcigpO1xyXG4gICAgfVxyXG4gICAgaWYgKCFza2lwVHJhbnNsYXRpb24pIHtcclxuICAgICAgICBpZiAodHlwZW9mIChyZXN1bHQpID09PSAndW5kZWZpbmVkJykge1xyXG4gICAgICAgICAgICAvLyBkbyBub3RoaW5nXHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAvLyByZXN1bHQgPSAnX3IkJF8nICsgcmVzdWx0LnRvU3RyaW5nKCkuc3BsaXQoJycpLmpvaW4oJ19yJCRfJyk7XHJcbiAgICAgICAgICAgIHJlc3VsdCA9IG51bVRvTG9jYWxlKHJlc3VsdCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIHR5cGVvZiAocmVzdWx0KSAhPT0gJ3VuZGVmaW5lZCcgPyByZXN1bHQudG9TdHJpbmcoKSA6ICcnO1xyXG59XHJcbi8qKlxyXG4gKiAgaHR0cHM6Ly9naXRodWIuY29tL3JlYWN0YWxlL3JlYWN0by1jb3JlL2lzc3Vlcy8yXHJcbiAqXHJcbiAqICBXaGVuZXZlciB1c2VyIGRvZXMgYW55ICgoci5jYWxjLikpIG9wZXJhdGlvbiwgdGhlIHJlc3VsdCB3aWxsIGF1dG9tYXRpY2FsbHkgc2F2ZWQgaW4gYSBzcGVjaWFsIHN5c3RlbSBsZXZlbCAoKHIudmFyLikpXHJcblxyXG4gICAgVGhpcyB3aWxsIGhlbHAgdXNlciB1c2UgdGhlIGFuZCBvdXRjb21lIG9mIHRoZSBjYWxjIG9wZXJhdGlvbnMgYW5kIHRoZW4gZG8gc29tZXRoaW5nIHdpdGggaXQuXHJcblxyXG4gICAgRXhhbXBsZVxyXG5cclxuICAgICgoci5jYWxjLiA3KzIpKSAgICAvLyB3aWxsIG91dHB1dCA5XHJcbiAgICAoKHIuY2FsYy4gMSsxNykpICAgIC8vIHdpbGwgb3V0cHV0IDE4XHJcbiAgICAoKHIuY2FsYy4gMjIrNSkpICAgIC8vIHdpbGwgb3V0cHV0IDI3XHJcblxyXG5cclxuICAgICgoci52YXIuXzEpKSAgICAvLyBTaG91bGQgZ2l2ZSBsYXN0IGNhbGMuIHJlc3VsdCBpLmUuIDI3XHJcbiAgICAoKHIudmFyLl8yKSkgICAgLy8gU2hvdWxkIGdpdmUgMThcclxuICAgICgoci52YXIuXzMpKSAgICAvLyBTaG91bGQgZ2l2ZSA5XHJcbiAqL1xyXG5mdW5jdGlvbiBfY3JlYXRlU3BlY2lhbENhbGNWYXIoKSB7XHJcbiAgICBjb25zdCBsZW4gPSBhbGxDYWxjUmVzdWx0cy5sZW5ndGg7XHJcbiAgICBjb25zdCByZXMgPSB7fTtcclxuICAgIGZvciAobGV0IGkgPSAxOyBpIDw9IGxlbjsgaSsrKSB7XHJcbiAgICAgICAgcmVzW2BfJHtpfWBdID0gYWxsQ2FsY1Jlc3VsdHNbbGVuIC0gaV07XHJcbiAgICB9XHJcbiAgICBzZXRBbGxWYXJzKHJlcyk7XHJcbiAgICByZXR1cm4gcmVzO1xyXG59XHJcbmV4cG9ydCBkZWZhdWx0IF9pbnRlcnByZXRfY2FsYztcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y2FsYy5qcy5tYXAiLCJsZXQgX19faXNQcmludE9mZiA9IGZhbHNlO1xyXG5sZXQgX19fcHJldlJlYWN0byA9IHsgbmFtZTogJycsIGRhdGE6ICcnIH07XHJcbmV4cG9ydCBjb25zdCBpc1ByaW50T2ZmID0gKCkgPT4gX19faXNQcmludE9mZjtcclxuZXhwb3J0IGNvbnN0IHNldFByaW50T2ZmID0gKHYpID0+IF9fX2lzUHJpbnRPZmYgPSB2O1xyXG5leHBvcnQgY29uc3QgZ2V0UHJldlJlYWN0byA9ICgpID0+IF9fX3ByZXZSZWFjdG87XHJcbmV4cG9ydCBjb25zdCBzZXRQcmV2UmVhY3RvID0gKHIpID0+IF9fX3ByZXZSZWFjdG8gPSByO1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1zeXN0ZW0uanMubWFwIiwiLyoqXHJcbiAqIEFsbCBSZWFjdG9zLCB0aGF0IHN0YXJ0IHdpdGggXCJjZmcuXCIgc2hvdWxkIGNvbWUgaGVyZSBmb3IgaW50ZXJwcmV0YXRpb25cclxuICogVGhlc2UgYXJlIENvbmZpZ3VyYXRpb24gUmVhY3RvcywgbGlrZSAoci5jZmcuc2V0TG9jYWxlLmJuKSBvciAoci5jZmcuc2V0TG9jYWxlLmVuKSBldGNcclxuICogRm9yIHRoZSBwdXJwb3NlIG9mIFwiJCRcIiBzZWUgZXhwbGFuYXRpb24gYWJvdmUgb2YgZnVuY3Rpb24gX2ludGVycHJldFxyXG4gKiBAcGFyYW0ge1N0cmluZ30gdG9rZW5cclxuICovXHJcbmltcG9ydCB7IF9zdGFydHNXaXRoIH0gZnJvbSAnLi4vc2VydmljZXMvdXRpbCc7XHJcbmltcG9ydCB7IHNldEN1cnJlbnRMb2NhbGUgfSBmcm9tICcuLi9zZXJ2aWNlcy9sb2NhbGUnO1xyXG5pbXBvcnQgeyBzZXRQcmludE9mZiB9IGZyb20gJy4uL3NlcnZpY2VzL3N5c3RlbSc7XHJcbmZ1bmN0aW9uIF9pbnRlcnByZXRfY2ZnKHRva2VuKSB7XHJcbiAgICAvLyAoci5jZmcuc2V0TG9jYWxlLmVuKSA9PiBDaGFuZ2VzIHJ0by5jdXJyZW50TGFuZ1xyXG4gICAgaWYgKF9zdGFydHNXaXRoKHRva2VuLCAnc2V0TG9jYWxlJykpIHtcclxuICAgICAgICB2YXIgbGFuZ0NvZGUgPSB0b2tlbi5yZXBsYWNlKCdzZXRMb2NhbGUuJywgJycpLnRyaW0oKTsgLy8gcmVtb3ZlICdzZXRMb2NhbGUuJ1xyXG4gICAgICAgIHNldEN1cnJlbnRMb2NhbGUobGFuZ0NvZGUpO1xyXG4gICAgfVxyXG4gICAgZWxzZSBpZiAodG9rZW4gPT09ICdwcmludE9mZicpIHtcclxuICAgICAgICBzZXRQcmludE9mZih0cnVlKTtcclxuICAgIH1cclxuICAgIGVsc2UgaWYgKHRva2VuID09PSAncHJpbnRPbicpIHtcclxuICAgICAgICBzZXRQcmludE9mZihmYWxzZSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gJyc7XHJcbn1cclxuZXhwb3J0IGRlZmF1bHQgX2ludGVycHJldF9jZmc7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNmZy5qcy5tYXAiLCIvKipcclxuICogQWxsIFJlYWN0b3MsIHRoYXQgc3RhcnQgd2l0aCBcImR0LlwiIHNob3VsZCBjb21lIGhlcmUgZm9yIGludGVycHJldGF0aW9uXHJcbiAqIFRoZXNlIGFyZSBEYXRlVGltZSBSZWFjdG9zLFxyXG4gKiBGb3Igc2tpcFRyYW5zbGF0aW9uID0gU2tpcCBMYW5ndWFnZSBUcmFuc2xhdGlvbiBQcm9jZXNzXHJcbiAqIEBwYXJhbSB7U3RyaW5nfSByVG9rZW5cclxuICovXHJcbmltcG9ydCB7IGdldEN1cnJlbnRMb2NhbGUgfSBmcm9tICcuLi9zZXJ2aWNlcy9sb2NhbGUnO1xyXG5leHBvcnQgY29uc3QgX2ludGVycHJldF9kdCA9IChyVG9rZW4sIHNraXBUcmFuc2xhdGlvbikgPT4ge1xyXG4gICAgbGV0IG5ld1R4dCA9ICcnO1xyXG4gICAgbGV0IGQgPSBuZXcgRGF0ZSgpO1xyXG4gICAgY29uc3QgZG5vdyA9IERhdGUubm93KCk7XHJcbiAgICBjb25zdCBsb2NhbGUgPSBza2lwVHJhbnNsYXRpb24gPyAnZW4nIDogZ2V0Q3VycmVudExvY2FsZSgpO1xyXG4gICAgc3dpdGNoIChyVG9rZW4pIHtcclxuICAgICAgICAvLyBSZWFjdG8gPSAoKHIuZHQueWVhcikpXHJcbiAgICAgICAgY2FzZSBcInllYXJcIjpcclxuICAgICAgICAgICAgLy8gbmV3VHh0ID0gZC5nZXRGdWxsWWVhcigpO1xyXG4gICAgICAgICAgICByZXR1cm4gbmV3IEludGwuRGF0ZVRpbWVGb3JtYXQobG9jYWxlLCB7IHllYXI6IFwibnVtZXJpY1wiIH0pLmZvcm1hdChkbm93KTtcclxuICAgICAgICAvLyAoci5kdC5kYXRlKVxyXG4gICAgICAgIGNhc2UgXCJkYXRlXCI6XHJcbiAgICAgICAgICAgIC8vIG5ld1R4dCA9IGQuZ2V0RGF0ZSgpO1xyXG4gICAgICAgICAgICByZXR1cm4gbmV3IEludGwuRGF0ZVRpbWVGb3JtYXQobG9jYWxlLCB7IGRheTogXCJudW1lcmljXCIgfSkuZm9ybWF0KGRub3cpO1xyXG4gICAgICAgIC8vICgoci5kdC5ob3VyKSlcclxuICAgICAgICAvLyAxMiBhdCBuaWdodCBzaG91bGQgYmUgc2hvd24gYXMgMTIsIG5vdCAwXHJcbiAgICAgICAgY2FzZSBcImhvdXJcIjpcclxuICAgICAgICAgICAgLy8gbmV3VHh0ID0gKChkLmdldEhvdXJzKCkgPiAxMiA/IChkLmdldEhvdXJzKCkgLSAxMikgOiBkLmdldEhvdXJzKCkpIHx8IDEyKTtcclxuICAgICAgICAgICAgLy8gQHRzLWlnbm9yZVxyXG4gICAgICAgICAgICByZXR1cm4gbmV3IEludGwuRGF0ZVRpbWVGb3JtYXQobG9jYWxlLCB7IGhvdXI6IFwibnVtZXJpY1wiLCBob3VyQ3ljbGU6IFwiaDEyXCIgfSkuZm9ybWF0KGRub3cpO1xyXG4gICAgICAgIC8vICgoci5kdC5ob3VyMjQpKVxyXG4gICAgICAgIGNhc2UgXCJob3VyMjRcIjpcclxuICAgICAgICAgICAgLy8gQHRzLWlnbm9yZVxyXG4gICAgICAgICAgICByZXR1cm4gbmV3IEludGwuRGF0ZVRpbWVGb3JtYXQobG9jYWxlLCB7IGhvdXI6IFwibnVtZXJpY1wiLCBob3VyQ3ljbGU6IFwiaDIzXCIgfSkuZm9ybWF0KGRub3cpO1xyXG4gICAgICAgIC8vICgoci5kdC5taW4pKVxyXG4gICAgICAgIGNhc2UgXCJtaW5cIjpcclxuICAgICAgICAgICAgcmV0dXJuIG5ldyBJbnRsLkRhdGVUaW1lRm9ybWF0KGxvY2FsZSwgeyBtaW51dGU6IFwibnVtZXJpY1wiIH0pLmZvcm1hdChkbm93KTtcclxuICAgICAgICAvLyAoKHIuZHQuc2VjKSlcclxuICAgICAgICBjYXNlIFwic2VjXCI6XHJcbiAgICAgICAgICAgIHJldHVybiBuZXcgSW50bC5EYXRlVGltZUZvcm1hdChsb2NhbGUsIHsgc2Vjb25kOiBcIm51bWVyaWNcIiB9KS5mb3JtYXQoZG5vdyk7XHJcbiAgICAgICAgLy8gKChyLmR0LmRheSkpXHJcbiAgICAgICAgY2FzZSBcImRheVwiOlxyXG4gICAgICAgICAgICAvLyBuZXdUeHQgPSBkYXlzW2QuZ2V0RGF5KCldO1xyXG4gICAgICAgICAgICByZXR1cm4gbmV3IEludGwuRGF0ZVRpbWVGb3JtYXQobG9jYWxlLCB7IHdlZWtkYXk6IFwibG9uZ1wiIH0pLmZvcm1hdChkbm93KTtcclxuICAgICAgICAvLyAoKHIuZHQubW9udGgpKVxyXG4gICAgICAgIGNhc2UgXCJtb250aFwiOlxyXG4gICAgICAgICAgICByZXR1cm4gbmV3IEludGwuRGF0ZVRpbWVGb3JtYXQobG9jYWxlLCB7IG1vbnRoOiBcImxvbmdcIiB9KS5mb3JtYXQoZG5vdyk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gbmV3VHh0O1xyXG59O1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kdC5qcy5tYXAiLCIvKlxyXG4qICgoci5mbi5mbk5hbWUpKVxyXG4qICgoci5mbi5mbk5hbWUgLCwgcGFyYW0xICwsIHBhcmFtMiApKSAgLy8gcGFzcyBwYXJhbXMgc2VwYXJhdGVkIHdpdGggRG91YmxlIENvbW1hXHJcbiogVGhpcyBmdW5jdGlvbiBpbnRlcnByZXRzIEZ1bmN0aW9uIHJlYWN0b3NcclxuKiBBbmQgY2FsbCB0aGUgZnVuY3Rpb25zXHJcbiovXHJcbi8vIGZucyB3aWxsIGhvbGQgYWxsIHRoZSBkZWNsYXJlZCBmdW5jdGlvbnNcclxuLy8gdGhhdCBjYW4gYmUgZXhjdXRlZCB1c2luZyAoKHIuZm4uZm5OYW1lKSkgXHJcbmxldCBmbnMgPSB7fTtcclxuZXhwb3J0IGNvbnN0IGFkZEZuID0gKGZuTmFtZSwgZm4pID0+IGZuc1tmbk5hbWVdID0gZm47XHJcbmV4cG9ydCBjb25zdCBnZXRGbiA9IChmbk5hbWUpID0+IGZuc1tmbk5hbWVdO1xyXG5leHBvcnQgY29uc3QgZ2V0Rm5MaXN0ID0gKCkgPT4gT2JqZWN0LmtleXMoZm5zKTtcclxuLyoqXHJcbiAqIEludGVycHJldCAvIHJ1biBhIHN0b3JlZCBmdW5jdGlvblxyXG4gKlxyXG4gKiBQYXNzICgoci5mbi5mbk5hbWUgLCwgcGFyYW0xLCBwYXJhbTIgKSlcclxuICogYWZ0ZXIgc3RyaXBwaW5nIHRoZSB0aGUgaW5pdGlhbCBgKChyLmZuLmBcclxuICogQHBhcmFtIGZuRGF0YSB8IGZuTmFtZSAsLCBwYXJhbTEgLCwgcGFyYW0yXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgX2ludGVycHJldF9mbiA9IChmbkRhdGEpID0+IHtcclxuICAgIGxldCByZXMgPSAnJztcclxuICAgIGxldCBmbk5hbWUgPSBmbkRhdGEudHJpbSgpO1xyXG4gICAgbGV0IHBhcmFtcyA9IFtdO1xyXG4gICAgLy8gSWYgdGhlcmUgYXJlIHBhcmFtc1xyXG4gICAgLy8gVGhlbiBzZXByYXRlIHRoZSBGbiBhbmQgVGhlIHBhcmFtc1xyXG4gICAgaWYgKGZuRGF0YS5pbmRleE9mKCcsLCcpID49IDApIHtcclxuICAgICAgICBsZXQgcGFydHMgPSBmbkRhdGEuc3BsaXQoJywsJyk7XHJcbiAgICAgICAgZm5OYW1lID0gcGFydHNbMF0udHJpbSgpO1xyXG4gICAgICAgIHBhcmFtcyA9IHBhcnRzLnNsaWNlKDEpLm1hcCh2ID0+IHYudHJpbSgpKTtcclxuICAgIH1cclxuICAgIGlmIChmbnNbZm5OYW1lXSAmJiB0eXBlb2YgKGZuc1tmbk5hbWVdKSA9PT0gXCJmdW5jdGlvblwiKSB7XHJcbiAgICAgICAgcmVzID0gZm5zW2ZuTmFtZV0uYXBwbHkod2luZG93LCBwYXJhbXMpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHJlcztcclxufTtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Zm4uanMubWFwIiwiaW1wb3J0IHsgX3ByZXBWYWxGb3JNYXRocywgX3N0YXJ0c1dpdGggfSBmcm9tICcuLi9zZXJ2aWNlcy91dGlsJztcclxuaW1wb3J0IHsgZ2V0UHJldlJlYWN0bywgc2V0UHJldlJlYWN0byB9IGZyb20gJy4uL3NlcnZpY2VzL3N5c3RlbSc7XHJcbi8qXHJcbiogSWYgYW4gXCJpZiByZWFjdG9cIiBpcyBwcm9jZXNzZWQsIHRoaXMgdmFyIHdpbGwgc3RvcmUgdGhlIGJvb2wgcmVzdWx0XHJcbiogTmV4dCxcclxuKiBJZiB0aGUgbmV4dCByZWFjdG8gaXMgYWxzbyBcImlmIHJlYWN0b1wiXHJcbipcclxuKiBJZiByZWFjdG8gZGV0ZXJtaW5lcyB0aGUgc2hvdy9oaWRlIG9mIHRoZSB1cGNvbWluZyBCTE9DS1xyXG4qL1xyXG4vLyBsZXQgX2lmUmVzdWx0ID0gdHJ1ZVxyXG5sZXQgX2NoYWluaW5nQ29uZGl0aW9uID0gJyc7XHJcbi8vIGV4cG9ydCBjb25zdCBnZXRfaWZSZXN1bHQgPSAoKSA9PiBfaWZSZXN1bHRcclxuLy8gZXhwb3J0IGNvbnN0IHNldF9pZlJlc3VsdCA9IHYgPT4gX2lmUmVzdWx0ID0gdlxyXG4vLyBleHBvcnQgY29uc3QgcmVzZXRfaWZSZXN1bHQgPSAoKSA9PiB7XHJcbi8vICAgICBfaWZSZXN1bHQgPSB0cnVlXHJcbi8vICAgICBfY2hhaW5pbmdDb25kaXRpb24gPSAnQU5EJ1xyXG4vLyB9XHJcbi8qKlxyXG4gICAgICogVGhpcyBmdW5jdGlvbiB3aWxsIGludGVycHJldCBJZiBzdGF0ZW1lbnRzIGFuZCByZXR1cm4gclRydWUgb3IgckZhbHNlXHJcbiAgICAgKiBzaW5jZSBcIigoci5pZi5cIiBhbmQgXCIpKVwiIGhhcyBiZWVuIHN0cmlwcGVkIGZyb20gYmVnaW5pbmcgYW5kIGVuZCwgaGVyZSB3ZSB3aWxsIG9ubHkgZ2V0IHRoZSBmb2xsb3dpbmdcclxuICAgICAqIHIudmFyLm15TnVtID0gMSAoY29tcGFyaXNvbiBvcGVyYXRvciwgZG8gYSA9PSBjaGVjaylcclxuICAgICAqIHIuZHQueWVhciA+IHIudmFyLnNvbWVTYXZlZFllYXJcclxuICAgICAqIDQgPCA5XHJcbiAgICAgKiBhbmQgYWxsIHRoZSAhIGNvdW50ZXIgcGFydHNcclxuICAgICAqXHJcbiAgICAgKiBGb3IgQ2hhaW5pbmcsIHRoZSBzdWJzZXF1ZW50IGlmIHJlYWN0b3MgbXVzdCBjb250YWluIC5vciAvIC5hbmQsIGUuZy5cclxuICAgICAqIEFORCByZWFjdG8gPT4gKChyLmlmLmFuZC4gOSA+IDUpKVxyXG4gICAgICogT1IgcmVhY3RvID0+ICgoci5pZi5hbmQuIDcgPiAzKSlcclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0geyp9IHRva1xyXG4qL1xyXG5leHBvcnQgY29uc3QgX2ludGVycHJldF9pZiA9ICh0b2spID0+IHtcclxuICAgIGxldCByZXN1bHQ7IC8vIHVuZGVmaW5lZFxyXG4gICAgLy8gZmlyc3QgZGV0ZXJtaW5lIGlmIGl0IGlzIEFORCBvciBPUiBvciBEZWZhdWx0IChmb3IgZmlyc3Qgb25lKVxyXG4gICAgLy8gYWxzbyBjbGVhcnMgdGhlIHRva2VuIG9mIGluaXRpYWwgb3IuIC8gYW5kLiAoaWYgYW55KVxyXG4gICAgdG9rID0gX2RldGVybWluZUNoYW5pbmdDb25kaXRpb24odG9rKTtcclxuICAgIGlmICh0b2suaW5kZXhPZignIT0nKSA+PSAwKSB7XHJcbiAgICAgICAgbGV0IHBhcnRzID0gdG9rLnNwbGl0KCchPScpO1xyXG4gICAgICAgIHJlc3VsdCA9IF9wcmVwVmFsRm9yTWF0aHMocGFydHNbMF0pICE9IF9wcmVwVmFsRm9yTWF0aHMocGFydHNbMV0pO1xyXG4gICAgfVxyXG4gICAgZWxzZSBpZiAodG9rLmluZGV4T2YoJz49JykgPj0gMCkge1xyXG4gICAgICAgIGxldCBwYXJ0cyA9IHRvay5zcGxpdCgnPj0nKTtcclxuICAgICAgICByZXN1bHQgPSBfcHJlcFZhbEZvck1hdGhzKHBhcnRzWzBdKSA+PSBfcHJlcFZhbEZvck1hdGhzKHBhcnRzWzFdKTtcclxuICAgIH1cclxuICAgIGVsc2UgaWYgKHRvay5pbmRleE9mKCc8PScpID49IDApIHtcclxuICAgICAgICBsZXQgcGFydHMgPSB0b2suc3BsaXQoJzw9Jyk7XHJcbiAgICAgICAgcmVzdWx0ID0gX3ByZXBWYWxGb3JNYXRocyhwYXJ0c1swXSkgPD0gX3ByZXBWYWxGb3JNYXRocyhwYXJ0c1sxXSk7XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmICh0b2suaW5kZXhPZignPScpID49IDApIHtcclxuICAgICAgICBsZXQgcGFydHMgPSB0b2suc3BsaXQoJz0nKTtcclxuICAgICAgICByZXN1bHQgPSBfcHJlcFZhbEZvck1hdGhzKHBhcnRzWzBdKSA9PSBfcHJlcFZhbEZvck1hdGhzKHBhcnRzWzFdKTtcclxuICAgIH1cclxuICAgIGVsc2UgaWYgKHRvay5pbmRleE9mKCc+JykgPj0gMCkge1xyXG4gICAgICAgIGxldCBwYXJ0cyA9IHRvay5zcGxpdCgnPicpO1xyXG4gICAgICAgIHJlc3VsdCA9IF9wcmVwVmFsRm9yTWF0aHMocGFydHNbMF0pID4gX3ByZXBWYWxGb3JNYXRocyhwYXJ0c1sxXSk7XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmICh0b2suaW5kZXhPZignPCcpID49IDApIHtcclxuICAgICAgICBsZXQgcGFydHMgPSB0b2suc3BsaXQoJzwnKTtcclxuICAgICAgICByZXN1bHQgPSBfcHJlcFZhbEZvck1hdGhzKHBhcnRzWzBdKSA8IF9wcmVwVmFsRm9yTWF0aHMocGFydHNbMV0pO1xyXG4gICAgfVxyXG4gICAgLy8gbm8gbWF0Y2hcclxuICAgIC8vIGkuZS4gY291bGQgbm90IGludGVycHJldCwgYXMgbm9uZSBvZiB0aGUgaWYgZWxzZSBxdWFsaWZpZWRcclxuICAgIGVsc2Uge1xyXG4gICAgICAgIHJldHVybiB0b2s7XHJcbiAgICB9XHJcbiAgICBpZiAodHlwZW9mIChyZXN1bHQpICE9PSAndW5kZWZpbmVkJykge1xyXG4gICAgICAgIC8vIGlmIGN1cnJlbnQgb25lIGlzIGFuIEFORCAvIE9SID9cclxuICAgICAgICBpZiAoX2NoYWluaW5nQ29uZGl0aW9uKSB7XHJcbiAgICAgICAgICAgIC8vIGdldCB0aGUgcHJldiByZXN1bHQgdG8gY2hhaW4gd2l0aFxyXG4gICAgICAgICAgICBjb25zdCBwcmV2UmVhY3RvID0gZ2V0UHJldlJlYWN0bygpO1xyXG4gICAgICAgICAgICAvLyBDaGFpbiBwb3NzaWJsZSBpZiBwcmV2IHJlYWN0byB3YXMgYWxzbyBhbiAnaWYnXHJcbiAgICAgICAgICAgIGlmIChwcmV2UmVhY3RvLm5hbWUgPT09ICdpZicpIHtcclxuICAgICAgICAgICAgICAgIGxldCBwcmV2UmVzdWx0ID0gQm9vbGVhbihwcmV2UmVhY3RvLmRhdGEpO1xyXG4gICAgICAgICAgICAgICAgcmVzdWx0ID0gX2NoYWluaW5nQ29uZGl0aW9uID09PSAnQU5EJyA/IChwcmV2UmVzdWx0ICYmIHJlc3VsdCkgOiAocHJldlJlc3VsdCB8fCByZXN1bHQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHNldFByZXZSZWFjdG8oe1xyXG4gICAgICAgICAgICBuYW1lOiAnaWYnLFxyXG4gICAgICAgICAgICBkYXRhOiByZXN1bHRcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIHJldHVybiAnJztcclxufTtcclxuLyoqXHJcbiAqIERldGVybWluZyBpZiBpdCBpcyBhIHN0YXJ0aW5nIGlmLiByZWFjdG9cclxuICogb3IgYSBjaGFuaW5nIGlmLmFuZC4gLyBpZi5vci5cclxuICogQHBhcmFtIHsqfSB0b2tcclxuICogQHJldHVybnNcclxuICovXHJcbmZ1bmN0aW9uIF9kZXRlcm1pbmVDaGFuaW5nQ29uZGl0aW9uKHRvaykge1xyXG4gICAgLy8gaWYgaXQgaXMgYW4gQU5EXHJcbiAgICBpZiAoX3N0YXJ0c1dpdGgodG9rLCAnYW5kLicpKSB7XHJcbiAgICAgICAgdG9rID0gdG9rLnN1YnN0cig0KTtcclxuICAgICAgICBfY2hhaW5pbmdDb25kaXRpb24gPSAnQU5EJztcclxuICAgIH1cclxuICAgIC8vIGVsc2UgaWYgaXQgaXMgYW4gT1JcclxuICAgIGVsc2UgaWYgKF9zdGFydHNXaXRoKHRvaywgJ29yLicpKSB7XHJcbiAgICAgICAgdG9rID0gdG9rLnN1YnN0cigzKTtcclxuICAgICAgICBfY2hhaW5pbmdDb25kaXRpb24gPSAnT1InO1xyXG4gICAgfVxyXG4gICAgLy8gaWYgaXQgd2FzIGFuIG9ubHkgaWYuLCBpLmUuIG5vIGlmLmFuZC4gLyBpZi5vci4gYXQgc3RhcnRcclxuICAgIGVsc2Uge1xyXG4gICAgICAgIC8vIE5vIGNoYWluaW5nID9cclxuICAgICAgICAvLyBCZWdpbmluZyBvZiB0aGUgQ2hhaW4gP1xyXG4gICAgICAgIC8vIEluIGFueSBjYXNlLCByZXNldCB0byBkZWZhdWx0c1xyXG4gICAgICAgIF9jaGFpbmluZ0NvbmRpdGlvbiA9ICcnO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHRvaztcclxufVxyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1pZi5qcy5tYXAiLCIvKipcclxuICogVGhpcyBmdW5jdGlvbiB3aWxsIHJlY2VpdmUsIHByZXN1bWFibHksIGEgcmVhY3RvXHJcbiAqIGFuZCBpdCBzaG91bGQgbG9vayBsaWtlIGVpdGhlciByLmNsYXNzLnByb3BlcnR5IE9SICgoci5jbGFzcy5wcm9wZXJ0eSkpXHJcbiAqIEZvciBMYW5ndWFnZSBUcmFuc2xhdGlvbiBQcmVwZW5kaW5nIHdpdGggXCJyJCRfXCIgaXMgbmVjZXNzYXJ5LCBMVFAgaW4gc2hvcnRcclxuICogc2tpcFRyYW5zbGF0aW9uIGlzIEZhbHNlIGJ5IGRlZmF1bHRcclxuICogZm9yd2FyZCBza2lwVHJhbnNsYXRpb24gdG8gdGhlIFJlYWN0byBJbnRlcnByZXRlcnMgd2hpY2ggcmV0dXJucyBhIHZhbHVlIChhIG51bWJlciBvciBhIHN0cmluZylcclxuICovXHJcbmltcG9ydCB7IF9pbnRlcnByZXRfYmxrLCBfaW50ZXJwcmV0X2NhbGMsIF9pbnRlcnByZXRfY2ZnLCBfaW50ZXJwcmV0X2R0LCBfaW50ZXJwcmV0X2ZuLCBfaW50ZXJwcmV0X2lmLCBfaW50ZXJwcmV0X3ZhciB9IGZyb20gJy4vaW5kZXgnO1xyXG5pbXBvcnQgeyBfc3RhcnRzV2l0aCB9IGZyb20gJy4uL3NlcnZpY2VzL3V0aWwnO1xyXG5pbXBvcnQgeyBzZXRQcmV2UmVhY3RvIH0gZnJvbSAnLi4vc2VydmljZXMvc3lzdGVtJztcclxuZnVuY3Rpb24gX2ludGVycHJldChhUmVhY3RvLCBza2lwVHJhbnNsYXRpb24gPSBmYWxzZSkge1xyXG4gICAgc2tpcFRyYW5zbGF0aW9uID0gc2tpcFRyYW5zbGF0aW9uIHx8IGZhbHNlO1xyXG4gICAgLy9sZXQgaWZSZWFjdG8gPSBmYWxzZTtcclxuICAgIGxldCBpbnRlcnByZXRlZFR4dCA9IFwiXCI7XHJcbiAgICBsZXQgdG9rID0gYVJlYWN0by50cmltKCk7XHJcbiAgICAvLyBJZiBOb3QgYSB2YWxpZCByZWFjdG8sIGp1c3QgcmV0dXJuXHJcbiAgICBpZiAoIV9zdGFydHNXaXRoKHRvaywgXCIoKHIuXCIpICYmICFfc3RhcnRzV2l0aCh0b2ssIFwici5cIikpIHtcclxuICAgICAgICByZXR1cm4gdG9rO1xyXG4gICAgfVxyXG4gICAgLy8gaWYgaW4gZm9ybSAoKHIuY2xhc3MucHJvcGVydHkpKVxyXG4gICAgZWxzZSBpZiAoX3N0YXJ0c1dpdGgodG9rLCBcIigoci5cIikpIHtcclxuICAgICAgICB0b2sgPSB0b2suc3Vic3RyaW5nKDQsICh0b2subGVuZ3RoIC0gMikpO1xyXG4gICAgfVxyXG4gICAgLy8gZWxzZSByZW1vdmUgdGhlIFwici5cIiBmcm9tIHRoZSBiZWdpbmluZ1xyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgdG9rID0gdG9rLnN1YnN0cigyKTtcclxuICAgIH1cclxuICAgIC8vIERFUFJFQ0FURURcclxuICAgIC8vIElmIHByZXYgaWZfcmVhY3RvIHJlc3VsdGVkIGluIEZBTFNFXHJcbiAgICAvLyBObyBOZWVkIHRvIHByb2Nlc3MgdGhpcyByZWFjdG9cclxuICAgIC8vIFJlc2V0IF9pZlJlc3VsdCBhbmRcclxuICAgIC8vIEp1c3QgcmV0dXJuIGJsYW5rXHJcbiAgICAvLyBpZighZ2V0X2lmUmVzdWx0KCkpIHtcclxuICAgIC8vICAgICBzZXRfaWZSZXN1bHQodHJ1ZSlcclxuICAgIC8vICAgICByZXR1cm4gJyc7XHJcbiAgICAvLyB9XHJcbiAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cclxuICAgIC8vIE5vdyBjcmVhdGUgdGhlIHJlZHVjZXIgc3RhaXJjYXNlXHJcbiAgICBpZiAoX3N0YXJ0c1dpdGgodG9rLCBcImR0LlwiKSkge1xyXG4gICAgICAgIGludGVycHJldGVkVHh0ID0gX2ludGVycHJldF9kdCh0b2suc3Vic3RyKDMpLCBza2lwVHJhbnNsYXRpb24pOyAvL3JlbW92ZSBcImR0LlwiIGFuZCBzZW5kIGZvciBpbnRlcnByZXRhdGlvblwiXHJcbiAgICAgICAgc2V0UHJldlJlYWN0byh7IG5hbWU6ICdkdCcgfSk7XHJcbiAgICB9XHJcbiAgICAvLyBpZiBpdCBpcyBhIENvbmZpZyBSZWFjdG8gaS5lLiBpdCBsb29rcyBsaWtlIChyLmNmZy5rZXkudmFsdWUpXHJcbiAgICBlbHNlIGlmIChfc3RhcnRzV2l0aCh0b2ssIFwiY2ZnLlwiKSkge1xyXG4gICAgICAgIGludGVycHJldGVkVHh0ID0gX2ludGVycHJldF9jZmcodG9rLnN1YnN0cig0KSk7IC8vcmVtb3ZlIFwiY2ZnLlwiIGFuZCBzZW5kIGZvciBpbnRlcnByZXRhdGlvblwiXHJcbiAgICAgICAgc2V0UHJldlJlYWN0byh7IG5hbWU6ICdjZmcnIH0pO1xyXG4gICAgfVxyXG4gICAgLy8gaWYgaXQgaXMgYSBWYXIgUmVhY3RvIGkuZS4gaXQgbG9va3MgbGlrZSAoci52YXIua2V5MSlcclxuICAgIGVsc2UgaWYgKF9zdGFydHNXaXRoKHRvaywgXCJ2YXIuXCIpKSB7XHJcbiAgICAgICAgaW50ZXJwcmV0ZWRUeHQgPSBfaW50ZXJwcmV0X3Zhcih0b2suc3Vic3RyKDQpKTsgLy9yZW1vdmUgXCJ2YXIuXCIgYW5kIHNlbmQgZm9yIGludGVycHJldGF0aW9uXCJcclxuICAgICAgICBzZXRQcmV2UmVhY3RvKHsgbmFtZTogJ3ZhcicgfSk7XHJcbiAgICB9XHJcbiAgICAvLyBpZiBpdCBpcyBhIENhbGMgUmVhY3RvIGkuZS4gaXQgbG9va3MgbGlrZSAoKHIuY2FsYy4gbjEgT1AgbjIpKVxyXG4gICAgZWxzZSBpZiAoX3N0YXJ0c1dpdGgodG9rLCBcImNhbGMuXCIpKSB7XHJcbiAgICAgICAgaW50ZXJwcmV0ZWRUeHQgPSBfaW50ZXJwcmV0X2NhbGModG9rLnN1YnN0cig1KSwgc2tpcFRyYW5zbGF0aW9uKTsgLy9yZW1vdmUgXCJ2YXIuXCIgYW5kIHNlbmQgZm9yIGludGVycHJldGF0aW9uXCJcclxuICAgICAgICBzZXRQcmV2UmVhY3RvKHsgbmFtZTogJ2NhbGMnIH0pO1xyXG4gICAgfVxyXG4gICAgLy8gaWYgaXQgYSBDb25kaXRpb25hbCBJRiBzdGF0ZW1lbnQsIFdPV1xyXG4gICAgZWxzZSBpZiAoX3N0YXJ0c1dpdGgodG9rLCBcImlmLlwiKSkge1xyXG4gICAgICAgIGludGVycHJldGVkVHh0ID0gX2ludGVycHJldF9pZih0b2suc3Vic3RyKDMpKTsgLy9yZW1vdmUgXCJpZi5cIiBhbmQgc2VuZCBmb3IgaW50ZXJwcmV0YXRpb25cIlxyXG4gICAgfVxyXG4gICAgLy8gaWYgaXQgaXMgYSBGdW5jdGlvbmFsIFJlYWN0byxcclxuICAgIGVsc2UgaWYgKF9zdGFydHNXaXRoKHRvaywgXCJmbi5cIikpIHtcclxuICAgICAgICBpbnRlcnByZXRlZFR4dCA9IF9pbnRlcnByZXRfZm4odG9rLnN1YnN0cigzKSk7IC8vcmVtb3ZlIFwiZm4uXCIgYW5kIHNlbmQgZm9yIGludGVycHJldGF0aW9uXCJcclxuICAgICAgICBzZXRQcmV2UmVhY3RvKHsgbmFtZTogJ2ZuJyB9KTtcclxuICAgIH1cclxuICAgIC8vIGlmIGl0IGlzIGFuIGludGVybmFsIEJsb2NrIFJlYWN0b1xyXG4gICAgLy8gKChyLl9ibG9jay5JRCkpXHJcbiAgICBlbHNlIGlmIChfc3RhcnRzV2l0aCh0b2ssIFwiX2Jsb2NrLlwiKSkge1xyXG4gICAgICAgIGludGVycHJldGVkVHh0ID0gX2ludGVycHJldF9ibGsodG9rLnN1YnN0cig3KSk7IC8vcmVtb3ZlIFwiX2Jsb2NrLlwiIGFuZCBzZW5kIGZvciBpbnRlcnByZXRhdGlvblwiXHJcbiAgICAgICAgc2V0UHJldlJlYWN0byh7IG5hbWU6ICdfYmxvY2snIH0pO1xyXG4gICAgfVxyXG4gICAgLy8gTm8gVmFsaWQgQ2xhc3MgRm91bmQgXHJcbiAgICAvLyBpLmUuICgoci5TT01FX0lOVkFMSURfQ0xBU1MpKVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgaW50ZXJwcmV0ZWRUeHQgPSAnJztcclxuICAgIH1cclxuICAgIHJldHVybiBpbnRlcnByZXRlZFR4dDtcclxufVxyXG5leHBvcnQgZGVmYXVsdCBfaW50ZXJwcmV0O1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbnRlcnByZXQuanMubWFwIiwiaW1wb3J0IHsgX2ZpbmRBbmRQcm9jZXNzUmVhY3RvcyB9IGZyb20gJy4uL3Byb2Nlc3Nvcic7XHJcbmltcG9ydCB7IGdldFByZXZSZWFjdG8gfSBmcm9tICcuLi9zZXJ2aWNlcy9zeXN0ZW0nO1xyXG4vKlxyXG4qIFRoaXMgdmFyaWFibGUgd2lsbCBzdG9yZSBhbGwge3sgLi4uIH19IGJsb2Nrc1xyXG4qIHdpdGgga2V5IGJlaW5nIHNvbWUgaWRcclxuKiB2YWx1ZSBiZWluZyB0aGlzIGJsb2NrXHJcbiovXHJcbmxldCBfckJsb2NrcyA9IHt9O1xyXG5leHBvcnQgeyBfcHJlUmVwbGFjZUJsb2NrcywgX2ludGVycHJldF9ibGsgfTtcclxuLypcclxuKiBBbGwgXCJ7eyAuLi4gfX1cIiBibG9ja3Mgd2lsbCBiZSByZXBsYWNlZCB3aXRoXHJcbiogKChyLl9ibG9jay5JRCkpIHJlYWN0b3NcclxuKlxyXG4qIFRoZXNlIGludGVybmFsICgoci5fYmxvY2suSUQpKSByZWFjdG8gYmxvY2tzIHdpbGwgYmUgcHJvY2Vzc2VkIGxhdGVyXHJcbiovXHJcbmZ1bmN0aW9uIF9wcmVSZXBsYWNlQmxvY2tzKHJUeHQpIHtcclxuICAgIF9yQmxvY2tzID0ge307XHJcbiAgICB2YXIgYmxvY2tDb3VudCA9IDA7XHJcbiAgICB2YXIgblR4dCA9IHJUeHQucmVwbGFjZSgve3soLnxcXG4pKj99fS9nLCBmdW5jdGlvbiAockJsb2NrKSB7XHJcbiAgICAgICAgdmFyIElEID0gKytibG9ja0NvdW50O1xyXG4gICAgICAgIF9yQmxvY2tzW0lEXSA9IHJCbG9jaztcclxuICAgICAgICByZXR1cm4gXCIoKHIuX2Jsb2NrLlwiICsgSUQgKyBcIikpXCI7XHJcbiAgICB9KTtcclxuICAgIHJldHVybiBuVHh0O1xyXG59XHJcbi8qXHJcbiogVGhpcyBmdW5jdGlvbiByZWNlaXZlcyBhIEJsb2NrSURcclxuKiBHZXRzIGNvcnJlc3Nwb25kaW5nIGJsb2NrIGZyb21cclxuKi9cclxuZnVuY3Rpb24gX2ludGVycHJldF9ibGsoYmxvY2tJRCkge1xyXG4gICAgbGV0IHByZXZSZWFjdG8gPSBnZXRQcmV2UmVhY3RvKCk7XHJcbiAgICBsZXQgYmxvY2sgPSAnJztcclxuICAgIC8vIEJsb2NrIHdpbGwgYmUgZXhlY3V0ZWQgSUZcclxuICAgIC8vIEVpdGhlciBwcmV2IHJlYWN0byB3YXMgbm90IGEgY29uZGl0aW9uXHJcbiAgICAvLyBPUlxyXG4gICAgLy8gSUYgaXQgd2FzIGEgY29uZGl0aW9uYWwsIHJlc3VsdGVkIGluIHRydWVcclxuICAgIGlmIChwcmV2UmVhY3RvLm5hbWUgIT09ICdpZicgfHwgKHByZXZSZWFjdG8ubmFtZSA9PT0gJ2lmJyAmJiBwcmV2UmVhY3RvLmRhdGEgPT09IHRydWUpKSB7XHJcbiAgICAgICAgYmxvY2sgPSBfckJsb2Nrc1tibG9ja0lEXTtcclxuICAgICAgICBibG9jayA9IGJsb2NrLnN1YnN0cmluZygyLCBibG9jay5sZW5ndGggLSAyKTsgLy9yZW1vdmUgc3RhcnRpbmcgXCJ7e1wiIGFuZCBlbmRpbmcgXCJ9fVwiXHJcbiAgICAgICAgYmxvY2sgPSBfZmluZEFuZFByb2Nlc3NSZWFjdG9zKGJsb2NrKTtcclxuICAgIH1cclxuICAgIGRlbGV0ZSBfckJsb2Nrc1tibG9ja0lEXTsgLy8gZnJlZSB0aGUgbWVtb3J5XHJcbiAgICByZXR1cm4gYmxvY2s7XHJcbn1cclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YmxvY2tzLmpzLm1hcCIsIi8qXHJcbiogL1xcKFxcKHJcXC4oLikqP1xcKVxcKS9nc1xyXG4qXHJcbiogVGhpcyByZWdleCBtYXRjaGVzIGFueXRoaW5nIHRoYXQgc3RhcnRzIHdpdGggXCIoKHIuXCJcclxuKiBBbmQgZW5kcyB3aXRoIFwiKSlcIlxyXG4qIEl0IGNhbiBnbyBtdWx0aWxpbmVcclxuKiBJdCBjYW4gY29udGFpbiBzaW5nbGUgXCIoXCIgYW5kIFwiKVwiXHJcbiogSXQgY2FuIGNvbnRhaW4gXCIoIChcIiwgaS5lLiBkb3VibGUgKCB3aXRoIHNwYWNlIGluIGJldHdlZW5cclxuKlxyXG4qIFRoaXMgZnVuY3Rpb24gcmVjZWl2ZXMgZW50aXJlIHJUeHRcclxuKiBJdCB3aWxsIGdvIHRocnUgYWxsICgoci5lYWN0bykpIG9uZSBieSBvbmVcclxuKiBhbmQgc2VuZCBmb3IgcHJvY2Vzc2luZ1xyXG4qXHJcbiovXHJcbmltcG9ydCB7IF9pbnRlcnByZXQgfSBmcm9tICcuL2ludGVycHJldGVycy9pbmRleCc7XHJcbmltcG9ydCB7IGlzUHJpbnRPZmYgfSBmcm9tICcuL3NlcnZpY2VzL3N5c3RlbSc7XHJcbmZ1bmN0aW9uIF9maW5kQW5kUHJvY2Vzc1JlYWN0b3MoclR4dCkge1xyXG4gICAgbGV0IG5UeHQgPSByVHh0LnJlcGxhY2UoL1xcKFxcKHJcXC4oLikqP1xcKVxcKS9ncywgZnVuY3Rpb24gKHJUb2tlbikge1xyXG4gICAgICAgIGxldCB2YWwgPSAnJztcclxuICAgICAgICAvLyBUUlkgQ0FUQ0gsIElGIFJFQUNUTyBJTlRFUlBSRVRFUiBGQUlMU1xyXG4gICAgICAgIC8vIEZPUiBBTlkgT0YgVEhFIFJFQUNUT1NcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICB2YWwgPSBfaW50ZXJwcmV0KHJUb2tlbik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNhdGNoIChlcnIpIHtcclxuICAgICAgICAgICAgY29uc29sZS5sb2coZXJyKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZmluYWxseSB7XHJcbiAgICAgICAgICAgIC8vIFdoYXRldmVyIGl0IGlzLCB0aGUgZmluYWwgb3V0cHV0IG11c3QgYmUgYSBzdHJpbmdcclxuICAgICAgICAgICAgLy8gQ2hlY2sgdW5kZWZpbmVkLCBiZWNhdXNlIHNvbWUgcmVhY3RvcyByLmlmLiBkb2Vzbm90IHJldHVybiBhbnl0aGluZ1xyXG4gICAgICAgICAgICBpZiAodHlwZW9mICh2YWwpID09PSAndW5kZWZpbmVkJylcclxuICAgICAgICAgICAgICAgIHZhbCA9ICcnO1xyXG4gICAgICAgICAgICB2YWwgPSB2YWwudG9TdHJpbmcoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGlzUHJpbnRPZmYoKSkge1xyXG4gICAgICAgICAgICB2YWwgPSAnJztcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHZhbDtcclxuICAgIH0pO1xyXG4gICAgLy8gcmV0dXJuIG5UeHQudHJpbSgpOyAgLy8gRG9uJ3QgdHJpbSB0aGUgb3ZlcmFsbCB0ZXh0IGkuZS4gbm90IHJlYWN0b1xyXG4gICAgcmV0dXJuIG5UeHQ7XHJcbn1cclxuZXhwb3J0IHsgX2ZpbmRBbmRQcm9jZXNzUmVhY3RvcyB9O1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1wcm9jZXNzb3IuanMubWFwIiwiLypcclxuICAgIFByb2plY3Q6IFJlYWN0aXZlIFRva2VucyAocmVhY3RvcylcclxuICAgIEF1dGhvcjogU3VtYW4gQmFyaWNrXHJcbiAgICBcclxuICAgIERlZmluaXRpb246XHJcbiAgICBBbGwgdGhlIHJlYWN0b3Mgd2lsIGhhdmUgdGhlIHN0cnVjdHVyZSAoKHIubmFtZXNwYWNlLmZuKSlcclxuXHJcbiAgICAvXFwoXFwoclxcLigufFxcbikqP1xcKVxcKS9nXHJcblxyXG4gICAgVGhpcyByZWdleCBtYXRjaGVzIGFueXRoaW5nIHRoYXQgc3RhcnRzIHdpdGggXCIoKHIuXCJcclxuICAgIEFuZCBlbmRzIHdpdGggXCIpKVwiXHJcbiAgICBJdCBjYW4gZ28gbXVsdGlsaW5lXHJcbiAgICBJdCBjYW4gY29udGFpbiBzaW5nbGUgXCIoXCIgYW5kIFwiKVwiXHJcbiAgICBJdCBjYW4gY29udGFpbiBcIiggKFwiLCBpLmUuIGRvdWJsZSAoIHdpdGggc3BhY2UgaW4gYmV0d2VlblxyXG4qL1xyXG5jb25zdCB2ZXJzaW9uID0gJzEuMS4wJztcclxuaW1wb3J0IHsgX3ByZVJlcGxhY2VCbG9ja3MgfSBmcm9tICcuL21vZHVsZXMvaW50ZXJwcmV0ZXJzL2Jsb2Nrcyc7XHJcbmltcG9ydCB7IF9maW5kQW5kUHJvY2Vzc1JlYWN0b3MgfSBmcm9tICcuL21vZHVsZXMvcHJvY2Vzc29yJztcclxuaW1wb3J0IHsgX2VhdFVud2FudGVkTkwgfSBmcm9tICcuL21vZHVsZXMvc2VydmljZXMvdXRpbCc7XHJcbmltcG9ydCB7IGFkZEZuLCBnZXRGbkxpc3QgfSBmcm9tICcuL21vZHVsZXMvaW50ZXJwcmV0ZXJzL2ZuJztcclxuaW1wb3J0IHsgZ2V0QWxsVmFycywgc2V0QWxsVmFycywgcmVzZXRWYXJzIH0gZnJvbSAnLi9tb2R1bGVzL2ludGVycHJldGVycy92YXInO1xyXG5pbXBvcnQgeyBnZXRMb2NhbGVzLCBudW1Ub0xvY2FsZSB9IGZyb20gJy4vbW9kdWxlcy9zZXJ2aWNlcy9sb2NhbGUnO1xyXG4vKlxyXG4qIElucHV0OiBUZXh0IHdpdGggcmVhY3Rvc1xyXG4qIE91dHB1dDogVGV4dCB3aWxsIGFsbCB0aGUgcmVhY3RvcyByZXNvbHZlZFxyXG4qIFRoaXMgZnVuY3Rpb24gd2lsbCBnbyB0aHJ1IGFsbCB0aGUgUlRPcyBhbmQgcHJvY2VzcyB0aGVtIG9uZSBieSBvbmVcclxuKiBBbmQgcmVwbGFjZSB0aGVtIGluIHRoZSBuZXcgc3RyaW5nXHJcbiovXHJcbmV4cG9ydCBjb25zdCBwcm9jZXNzID0gKHR4dCkgPT4ge1xyXG4gICAgcmV0dXJuIF9zdGFydFByb2Nlc3NpbmcodHh0KTtcclxufTtcclxuZnVuY3Rpb24gX3N0YXJ0UHJvY2Vzc2luZyhyVHh0KSB7XHJcbiAgICBsZXQgblR4dCA9IF9wcmVSZXBsYWNlQmxvY2tzKHJUeHQpO1xyXG4gICAgblR4dCA9IF9maW5kQW5kUHJvY2Vzc1JlYWN0b3MoblR4dCk7XHJcbiAgICBuVHh0ID0gX2VhdFVud2FudGVkTkwoblR4dCk7XHJcbiAgICByZXR1cm4gblR4dDtcclxufVxyXG4vLyBAdHMtaWdub3JlXHJcbndpbmRvdy5ydG8gPSB7XHJcbiAgICBnZXRWZXJzaW9uOiAoKSA9PiB2ZXJzaW9uLFxyXG4gICAgcHJvY2VzcyxcclxuICAgIGFkZEZuLFxyXG4gICAgZ2V0Rm5MaXN0LFxyXG4gICAgZ2V0QWxsVmFycyxcclxuICAgIHNldEFsbFZhcnMsXHJcbiAgICByZXNldFZhcnMsXHJcbiAgICBnZXRMb2NhbGVzLFxyXG4gICAgbnVtVG9Mb2NhbGVcclxufTtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIl0sInNvdXJjZVJvb3QiOiIifQ==